/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "_content/Syncfusion.Blazor/scripts/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./bundles/sf-smith-chart.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./bundles/sf-smith-chart.js":
/*!***********************************!*\
  !*** ./bundles/sf-smith-chart.js ***!
  \***********************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_smith_chart_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-smith-chart.js */ "./modules/sf-smith-chart.js");
/* harmony import */ var _modules_sf_smith_chart_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_smith_chart_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-smith-chart.js":
/*!***********************************!*\
  !*** ./modules/sf-smith-chart.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};

window.sfBlazor.SmithChart = function () {
  'use strict';
  /* eslint-disable max-len */

  var SfSmithChart =
  /** @class */
  function () {
    function SfSmithChart(id, element, dotNetRef) {
      this.mouseY = 0;
      this.mouseX = 0;
      this.resizeTo = 0;
      this.id = id;
      this.element = element;
      this.dotNetRef = dotNetRef; // eslint-disable-next-line camelcase

      this.element.blazor__instance = this;
    }

    SfSmithChart.prototype.unWireEvents = function () {
      var cancelEvent = sf.base.Browser.isPointer ? 'pointerleave' : 'mouseleave';
      sf.base.EventHandler.remove(this.element, sf.base.Browser.touchMoveEvent, this.mouseMove);
      sf.base.EventHandler.remove(this.element, 'click', this.chartOnMouseClick);
      sf.base.EventHandler.remove(this.element, cancelEvent, this.mouseLeave);
      window.removeEventListener(sf.base.Browser.isTouch && 'orientation' in window && 'onorientationchange' in window ? 'orientationchange' : 'resize', this.rangeResize.bind(this));
      sf.base.EventHandler.remove(this.element, 'mousedown', this.mouseDown);
      var keyboardModule = sf.base.getInstance(this.element, this.keyActionHandler);

      if (keyboardModule) {
        keyboardModule.destroy();
      }

      this.element = null;
      this.dotNetRef = null;
    };

    SfSmithChart.prototype.wireEvents = function () {
      var cancelEvent = sf.base.Browser.isPointer ? 'pointerleave' : 'mouseleave';
      sf.base.EventHandler.add(this.element, sf.base.Browser.touchMoveEvent, this.mouseMove, this);
      sf.base.EventHandler.add(this.element, 'click', this.chartOnMouseClick, this);
      sf.base.EventHandler.add(this.element, cancelEvent, this.mouseLeave, this);
      window.addEventListener(sf.base.Browser.isTouch && 'orientation' in window && 'onorientationchange' in window ? 'orientationchange' : 'resize', this.rangeResize.bind(this));
      new sf.base.KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: {
          enter: 'enter'
        },
        eventName: 'keydown'
      });
      sf.base.EventHandler.add(this.element, 'mousedown', this.mouseDown.bind(this), this);
    };

    SfSmithChart.prototype.mouseDown = function (event) {
      event.preventDefault();
    };

    SfSmithChart.prototype.keyActionHandler = function (event) {
      if (event.action === 'enter') {
        this.chartOnMouseClickProcess(event);
      }
    };

    SfSmithChart.prototype.mouseMove = function (e) {
      if (document.getElementById(this.id + '_svg')) {
        this.setMouseXY(e);
      }

      if (this.dotNetRef) {
        this.dotNetRef.invokeMethodAsync('OnSmithChartMouseMove', this.getEventArgs(e));
      }
    };

    SfSmithChart.prototype.chartOnMouseClick = function (e) {
      this.chartOnMouseClickProcess(e);
    };

    SfSmithChart.prototype.chartOnMouseClickProcess = function (e) {
      if (this.dotNetRef) {
        this.dotNetRef.invokeMethodAsync('OnSmithChartMouseClick', this.getEventArgs(e));
      }
    };

    SfSmithChart.prototype.mouseLeave = function (e) {
      this.setMouseXY(e);

      if (this.dotNetRef) {
        this.dotNetRef.invokeMethodAsync('OnSmithChartMouseLeave', this.getEventArgs(e));
      }
    };

    SfSmithChart.prototype.rangeResize = function (e) {
      var _this = this;

      if (this.dotNetRef) {
        if (this.resizeTo) {
          clearTimeout(this.resizeTo);
        }

        this.resizeTo = window.setTimeout(function () {
          _this.dotNetRef.invokeMethodAsync('OnSmithChartResize', e);
        }, 500);
      }
    };

    SfSmithChart.prototype.setMouseXY = function (e) {
      var pageX;
      var pageY;
      var touchArg;

      if (e.type === 'touchmove') {
        touchArg = e;
        pageX = touchArg.changedTouches[0].clientX;
        pageY = touchArg.changedTouches[0].clientY;
      } else {
        pageX = e.clientX;
        pageY = e.clientY;
      }

      var svgRect = document.getElementById(this.id + '_svg').getBoundingClientRect();
      var rect = document.getElementById(this.id).getBoundingClientRect();
      this.mouseY = pageY - rect.top - Math.max(svgRect.top - rect.top, 0);
      this.mouseX = pageX - rect.left - Math.max(svgRect.left - rect.left, 0);
    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any


    SfSmithChart.prototype.getEventArgs = function (e) {
      return {
        type: e.type,
        clientX: e.clientX ? e.clientX : 0,
        clientY: e.clientY ? e.clientY : 0,
        mouseX: this.mouseX,
        mouseY: this.mouseY,
        pointerType: e.pointerType ? e.pointerType : e.action ? e.action : '',
        target: e.target.id,
        changedTouches: {
          clientX: e.changedTouches ? e.changedTouches[0].clientX : 0,
          clientY: e.changedTouches ? e.changedTouches[0].clientY : 0
        }
      };
    };

    return SfSmithChart;
  }(); // eslint-disable-next-line @typescript-eslint/no-explicit-any


  var SmithChart = {
    id: '',
    mouseY: 0,
    mouseX: 0,
    initialize: function initialize(id, dotNetRef, height, width, element) {
      if (element) {
        var navigator_1 = new SfSmithChart(id, element, dotNetRef);
        navigator_1.wireEvents();
        return this.getElementBoundsById(element, height, width);
      }

      return {
        width: 0,
        height: 0
      };
    },
    getElementBoundsById: function getElementBoundsById(element, height, width) {
      if (element) {
        element.style.height = height;
        element.style.width = width;
        return {
          width: element.clientWidth || element.offsetWidth,
          height: element.clientHeight || element.offsetHeight
        };
      }

      return {
        width: 0,
        height: 0
      };
    },
    charCollection: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '!', '"', '#', '$', '%', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', ' '],
    measureText: function measureText(text, size, fontWeight, fontStyle, fontFamily) {
      var textObject = document.getElementById('chartmeasuretext');

      if (textObject === null) {
        textObject = sf.base.createElement('text', {
          id: 'chartmeasuretext'
        });
        document.body.appendChild(textObject);
      }

      if (text === ' ') {
        text = '&nbsp;';
      }

      textObject.innerHTML = text;
      textObject.style.position = 'fixed';
      textObject.style.fontSize = '100px';
      textObject.style.fontWeight = fontWeight;
      textObject.style.fontStyle = fontStyle;
      textObject.style.fontFamily = fontFamily;
      textObject.style.visibility = 'hidden';
      textObject.style.top = '-100';
      textObject.style.left = '0';
      textObject.style.whiteSpace = 'nowrap';
      textObject.style.lineHeight = 'normal';
      return {
        Width: textObject.clientWidth,
        Height: textObject.clientHeight
      };
    },
    getCharSizeByFontKeys: function getCharSizeByFontKeys(fontkeys) {
      var charSizeList = {};
      var charList = this.charCollection;
      var charLength = charList.length;
      var fontKeysLength = fontkeys.length;

      for (var i = 0; i < fontKeysLength; i++) {
        var fontValues = fontkeys[i].split('_');
        var fontWeight = fontValues[0];
        var fontStyle = fontValues[1];
        var fontFamily = fontValues[2];
        var charKey = '_' + fontWeight + '_' + fontStyle + '_' + fontFamily;

        for (var j = 0; j < charLength; j++) {
          charSizeList[charList[j] + charKey] = this.measureText(charList[j], '', fontWeight, fontStyle, fontFamily);
        }
      }

      return JSON.stringify(charSizeList);
    },
    getCharSizeByCharKey: function getCharSizeByCharKey(charkey) {
      var fontValues = charkey.split('_');
      var _char = fontValues[0];
      var size = fontValues[1];
      var fontWeight = fontValues[2];
      var fontStyle = fontValues[3];
      var fontFamily = fontValues[4];
      return this.measureText(_char, size, fontWeight, fontStyle, fontFamily);
    },
    resizeTo: {},
    linear: function linear(currentTime, startValue, endValue, duration) {
      return -endValue * Math.cos(currentTime / duration * (Math.PI / 2)) + endValue + startValue;
    },
    reverselinear: function reverselinear(currentTime, startValue, endValue, duration) {
      return -startValue * Math.sin(currentTime / duration * (Math.PI / 2)) + endValue + startValue;
    },
    doLinearAnimation: function doLinearAnimation(id, duration, isInverted) {
      var _this = this;

      var clipRect = document.getElementById(id);

      if (clipRect) {
        var animation = new sf.base.Animation({});
        var x_1 = +clipRect.getAttribute('x');
        var width_1 = +clipRect.getAttribute('width');
        animation.animate(clipRect, {
          duration: duration,
          delay: 0,
          progress: function progress(args) {
            if (args.timeStamp >= args.delay) {
              clipRect.setAttribute('visibility', 'visible');

              if (isInverted) {
                clipRect.setAttribute('width', _this.linear(args.timeStamp - args.delay, 0, width_1, args.duration).toString());
              } else {
                clipRect.setAttribute('x', _this.reverselinear(args.timeStamp - args.delay, width_1, 0, args.duration).toString());
              }
            }
          },
          end: function end() {
            if (isInverted) {
              clipRect.setAttribute('width', width_1.toString());
            } else {
              clipRect.setAttribute('x', x_1.toString());
            }
          }
        });
      }

      return clipRect == null;
    },
    getTemplateSize: function getTemplateSize(id) {
      var element = document.getElementById(id);

      if (element) {
        return {
          width: element.offsetWidth,
          height: element.offsetHeight
        };
      }

      return null;
    },
    fadeOut: function fadeOut(element) {
      if (sf.base.isNullOrUndefined(element.blazor__instance) || !sf.base.isNullOrUndefined(element.blazor__instance) && sf.base.isNullOrUndefined(element.blazor__instance.tooltip)) {
        return;
      }

      element.blazor__instance.tooltip.fadeOut();
    },
    tooltip: {},
    renderTooltip: function renderTooltip(tooltipOptions, elementId, element) {
      var svgElement = document.getElementById(elementId + '_svg');
      var firstRender = svgElement && parseInt(svgElement.getAttribute('opacity'), 10) > 0 ? false : true;
      var options = JSON.parse(tooltipOptions);
      var currentInstance = element.blazor__instance;

      if (firstRender) {
        currentInstance.tooltip = new sf.svgbase.Tooltip(options);
        currentInstance.tooltip.appendTo('#' + elementId);
      } else if (!sf.base.isNullOrUndefined(currentInstance.tooltip)) {
        currentInstance.tooltip.location = new sf.svgbase.TooltipLocation(options.location.x, options.location.y);
        currentInstance.tooltip.content = options.content;
        currentInstance.tooltip.header = options.header;
        currentInstance.tooltip.palette = options.palette;
        currentInstance.tooltip.shapes = options.shapes;
        currentInstance.tooltip.data = options.data;
        currentInstance.tooltip.template = options.template;
        currentInstance.tooltip.textStyle.color = options.textStyle.color || currentInstance.tooltip.textStyle.color;
        currentInstance.tooltip.textStyle.fontFamily = options.textStyle.fontFamily || currentInstance.tooltip.textStyle.fontFamily;
        currentInstance.tooltip.textStyle.fontStyle = options.textStyle.fontStyle || currentInstance.tooltip.textStyle.fontStyle;
        currentInstance.tooltip.textStyle.fontWeight = options.textStyle.fontWeight || currentInstance.tooltip.textStyle.fontWeight;
        currentInstance.tooltip.textStyle.opacity = options.textStyle.opacity || currentInstance.tooltip.textStyle.opacity;
        currentInstance.tooltip.textStyle.size = options.textStyle.size || currentInstance.tooltip.textStyle.size;
        currentInstance.tooltip.dataBind();
      }
    },
    destroy: function destroy(element) {
      if (element && element.blazor__instance) {
        element.blazor__instance.unWireEvents();
      }
    }
  };
  return SmithChart;
}();

/***/ })

/******/ });