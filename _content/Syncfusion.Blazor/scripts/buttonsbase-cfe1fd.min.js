/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "_content/Syncfusion.Blazor/scripts/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./bundles/buttonsbase.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./bundles/buttonsbase.js":
/*!********************************!*\
  !*** ./bundles/buttonsbase.js ***!
  \********************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_buttonsbase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/buttonsbase.js */ "./modules/buttonsbase.js");
/* harmony import */ var _modules_buttonsbase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_buttonsbase_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/buttonsbase.js":
/*!********************************!*\
  !*** ./modules/buttonsbase.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sf = window.sf || {};

var buttonsbase = function buttonsbase(exports) {
  'use strict';
  /**
   * Initialize wrapper element for angular.
   *
   * @private
   *
   * @param {CreateElementArgs} createElement - Specifies created element args
   * @param {string} tag - Specifies tag name
   * @param {string} type - Specifies type name
   * @param {HTMLInputElement} element - Specifies input element
   * @param {string} WRAPPER - Specifies wrapper element
   * @param {string} role - Specifies role
   * @returns {HTMLInputElement} - Input Element
   */

  function wrapperInitialize(createElement, tag, type, element, WRAPPER, role) {
    var input = element;

    if (element.tagName === tag) {
      var ejInstance = sf.base.getValue('ej2_instances', element);
      input = createElement('input', {
        attrs: {
          'type': type
        }
      });
      var props = ['change', 'cssClass', 'label', 'labelPosition', 'id'];

      for (var index = 0, len = element.attributes.length; index < len; index++) {
        if (props.indexOf(element.attributes[index].nodeName) === -1) {
          input.setAttribute(element.attributes[index].nodeName, element.attributes[index].nodeValue);
        }
      }

      sf.base.attributes(element, {
        'class': WRAPPER,
        'role': role,
        'aria-checked': 'false'
      });
      element.appendChild(input);
      sf.base.setValue('ej2_instances', ejInstance, input);
      sf.base.deleteObject(element, 'ej2_instances');
    }

    return input;
  }
  /**
   * Get the text node.
   *
   * @param {HTMLElement} element - Specifies html element
   * @private
   * @returns {Node} - Text node.
   */


  function getTextNode(element) {
    var node;
    var childnode = element.childNodes;

    for (var i = 0; i < childnode.length; i++) {
      node = childnode[i];

      if (node.nodeType === 3) {
        return node;
      }
    }

    return null;
  }
  /**
   * Destroy the button components.
   *
   * @private
   * @param {Switch | CheckBox} ejInst - Specifies eJ2 Instance
   * @param {Element} wrapper - Specifies wrapper element
   * @param {string} tagName - Specifies tag name
   * @returns {void}
   */


  function destroy(ejInst, wrapper, tagName) {
    if (tagName === 'INPUT') {
      wrapper.parentNode.insertBefore(ejInst.element, wrapper);
      sf.base.detach(wrapper);
      ejInst.element.checked = false;
      ['name', 'value', 'disabled'].forEach(function (key) {
        ejInst.element.removeAttribute(key);
      });
    } else {
      ['role', 'aria-checked', 'class'].forEach(function (key) {
        wrapper.removeAttribute(key);
      });
      wrapper.innerHTML = '';
    }
  }
  /**
   * Initialize control pre rendering.
   *
   * @private
   * @param {Switch | CheckBox} proxy - Specifies proxy
   * @param {string} control - Specifies control
   * @param {string} wrapper - Specifies wrapper element
   * @param {HTMLInputElement} element - Specifies input element
   * @param {string} moduleName - Specifies module name
   * @returns {void}
   */


  function preRender(proxy, control, wrapper, element, moduleName) {
    element = wrapperInitialize(proxy.createElement, control, 'checkbox', element, wrapper, moduleName);
    proxy.element = element;

    if (proxy.element.getAttribute('type') !== 'checkbox') {
      proxy.element.setAttribute('type', 'checkbox');
    }

    if (!proxy.element.id) {
      proxy.element.id = sf.base.getUniqueID('e-' + moduleName);
    }
  }
  /**
   * Creates CheckBox component UI with theming and ripple support.
   *
   * @private
   * @param {CreateElementArgs} createElement - Specifies Created Element args
   * @param {boolean} enableRipple - Specifies ripple effect
   * @param {CheckBoxUtilModel} options - Specifies Checkbox util Model
   * @returns {Element} - Checkbox Element
   */


  function createCheckBox(createElement, enableRipple, options) {
    if (enableRipple === void 0) {
      enableRipple = false;
    }

    if (options === void 0) {
      options = {};
    }

    var wrapper = createElement('div', {
      className: 'e-checkbox-wrapper e-css'
    });

    if (options.cssClass) {
      sf.base.addClass([wrapper], options.cssClass.split(' '));
    }

    if (options.enableRtl) {
      wrapper.classList.add('e-rtl');
    }

    if (enableRipple) {
      var rippleSpan = createElement('span', {
        className: 'e-ripple-container'
      });
      sf.base.rippleEffect(rippleSpan, {
        isCenterRipple: true,
        duration: 400
      });
      wrapper.appendChild(rippleSpan);
    }

    var frameSpan = createElement('span', {
      className: 'e-frame e-icons'
    });

    if (options.checked) {
      frameSpan.classList.add('e-check');
    }

    wrapper.appendChild(frameSpan);

    if (options.label) {
      var labelSpan = createElement('span', {
        className: 'e-label'
      });

      if (options.disableHtmlEncode) {
        labelSpan.textContent = options.label;
      } else {
        labelSpan.innerHTML = options.label;
      }

      wrapper.appendChild(labelSpan);
    }

    return wrapper;
  }
  /**
   * Handles ripple mouse.
   *
   * @private
   * @param {MouseEvent} e - Specifies mouse event
   * @param {Element} rippleSpan - Specifies Ripple span element
   * @returns {void}
   */


  function rippleMouseHandler(e, rippleSpan) {
    if (rippleSpan) {
      var event_1 = document.createEvent('MouseEvents');
      event_1.initEvent(e.type, false, true);
      rippleSpan.dispatchEvent(event_1);
    }
  }
  /**
   * Append hidden input to given element
   *
   * @private
   * @param {Switch | CheckBox} proxy - Specifies Proxy
   * @param {Element} wrap - Specifies Wrapper ELement
   * @returns {void}
   */


  function setHiddenInput(proxy, wrap) {
    if (proxy.element.getAttribute('ejs-for')) {
      wrap.appendChild(proxy.createElement('input', {
        attrs: {
          'name': proxy.name || proxy.element.name,
          'value': 'false',
          'type': 'hidden'
        }
      }));
    }
  }

  exports.wrapperInitialize = wrapperInitialize;
  exports.getTextNode = getTextNode;
  exports.destroy = destroy;
  exports.preRender = preRender;
  exports.createCheckBox = createCheckBox;
  exports.rippleMouseHandler = rippleMouseHandler;
  exports.setHiddenInput = setHiddenInput;
  return exports;
};

window.sf.buttons = window.sf.base.extend({}, window.sf.buttons, buttonsbase({}));

/***/ })

/******/ });