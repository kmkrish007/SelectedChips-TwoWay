/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "_content/Syncfusion.Blazor/scripts/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./bundles/button.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./bundles/button.js":
/*!***************************!*\
  !*** ./bundles/button.js ***!
  \***************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_button_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/button.js */ "./modules/button.js");
/* harmony import */ var _modules_button_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_button_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/button.js":
/*!***************************!*\
  !*** ./modules/button.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

window.sf = window.sf || {};

var sfbutton = function sfbutton(exports) {
  'use strict';

  var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
      _extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics(d, b);
    };

    return function (d, b) {
      _extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
      if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var buttonObserver = new sf.base.Observer();
  var cssClassName = {
    RTL: 'e-rtl',
    BUTTON: 'e-btn',
    PRIMARY: 'e-primary',
    ICONBTN: 'e-icon-btn'
  };
  /**
   * The Button is a graphical user interface element that triggers an event on its click action. It can contain a text, an image, or both.
   * ```html
   * <button id="button">Button</button>
   * ```
   * ```typescript
   * <script>
   * var btnObj = new Button();
   * btnObj.appendTo("#button");
   * </script>
   * ```
   */

  var Button =
  /** @class */
  function (_super) {
    __extends(Button, _super);
    /**
     * Constructor for creating the widget
     *
     * @param  {ButtonModel} options - Specifies the button model
     * @param  {string|HTMLButtonElement} element - Specifies the target element
     */


    function Button(options, element) {
      return _super.call(this, options, element) || this;
    }

    Button.prototype.preRender = function () {// pre render code snippets
    };
    /**
     * Initialize the control rendering
     *
     * @returns {void}
     * @private
     */


    Button.prototype.render = function () {
      this.initialize();
      this.removeRippleEffect = sf.base.rippleEffect(this.element, {
        selector: '.' + cssClassName.BUTTON
      });
      this.renderComplete();
    };

    Button.prototype.initialize = function () {
      if (this.cssClass) {
        sf.base.addClass([this.element], this.cssClass.split(' '));
      }

      if (this.isPrimary) {
        this.element.classList.add(cssClassName.PRIMARY);
      }

      if (!sf.base.isBlazor() || sf.base.isBlazor() && this.getModuleName() !== 'progress-btn') {
        if (this.content) {
          var tempContent = this.enableHtmlSanitizer ? sf.base.SanitizeHtmlHelper.sanitize(this.content) : this.content;
          this.element.innerHTML = tempContent;
        }

        this.setIconCss();
      }

      if (this.enableRtl) {
        this.element.classList.add(cssClassName.RTL);
      }

      if (this.disabled) {
        this.controlStatus(this.disabled);
      } else {
        this.wireEvents();
      }
    };

    Button.prototype.controlStatus = function (disabled) {
      this.element.disabled = disabled;
    };

    Button.prototype.setIconCss = function () {
      if (this.iconCss) {
        var span = this.createElement('span', {
          className: 'e-btn-icon ' + this.iconCss
        });

        if (!this.element.textContent.trim()) {
          this.element.classList.add(cssClassName.ICONBTN);
        } else {
          span.classList.add('e-icon-' + this.iconPosition.toLowerCase());

          if (this.iconPosition === 'Top' || this.iconPosition === 'Bottom') {
            this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn');
          }
        }

        var node = this.element.childNodes[0];

        if (node && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {
          this.element.insertBefore(span, node);
        } else {
          this.element.appendChild(span);
        }
      }
    };

    Button.prototype.wireEvents = function () {
      if (this.isToggle) {
        sf.base.EventHandler.add(this.element, 'click', this.btnClickHandler, this);
      }
    };

    Button.prototype.unWireEvents = function () {
      if (this.isToggle) {
        sf.base.EventHandler.remove(this.element, 'click', this.btnClickHandler);
      }
    };

    Button.prototype.btnClickHandler = function () {
      if (this.element.classList.contains('e-active')) {
        this.element.classList.remove('e-active');
      } else {
        this.element.classList.add('e-active');
      }
    };
    /**
     * Destroys the widget.
     *
     * @returns {void}
     */


    Button.prototype.destroy = function () {
      var classList = [cssClassName.PRIMARY, cssClassName.RTL, cssClassName.ICONBTN, 'e-success', 'e-info', 'e-danger', 'e-warning', 'e-flat', 'e-outline', 'e-small', 'e-bigger', 'e-active', 'e-round', 'e-top-icon-btn', 'e-bottom-icon-btn'];

      if (this.cssClass) {
        classList = classList.concat(this.cssClass.split(' '));
      }

      _super.prototype.destroy.call(this);

      sf.base.removeClass([this.element], classList);

      if (!this.element.getAttribute('class')) {
        this.element.removeAttribute('class');
      }

      if (this.disabled) {
        this.element.removeAttribute('disabled');
      }

      if (this.content) {
        this.element.innerHTML = this.element.innerHTML.replace(this.content, '');
      }

      var span = this.element.querySelector('span.e-btn-icon');

      if (span) {
        sf.base.detach(span);
      }

      this.unWireEvents();

      if (sf.base.isRippleEnabled) {
        this.removeRippleEffect();
      }
    };
    /**
     * Get component name.
     *
     * @returns {string} - Module name
     * @private
     */


    Button.prototype.getModuleName = function () {
      return 'btn';
    };
    /**
     * Get the properties to be maintained in the persisted state.
     *
     * @returns {string} - Persist Data
     * @private
     */


    Button.prototype.getPersistData = function () {
      return this.addOnPersist([]);
    };
    /**
     * Dynamically injects the required modules to the component.
     *
     * @private
     * @returns {void}
     */


    Button.Inject = function () {// Inject code snippets
    };
    /**
     * Called internally if any of the property value changed.
     *
     * @param  {ButtonModel} newProp - Specifies new properties
     * @param  {ButtonModel} oldProp - Specifies old properties
     * @returns {void}
     * @private
     */


    Button.prototype.onPropertyChanged = function (newProp, oldProp) {
      var span = this.element.querySelector('span.e-btn-icon');

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'isPrimary':
            if (newProp.isPrimary) {
              this.element.classList.add(cssClassName.PRIMARY);
            } else {
              this.element.classList.remove(cssClassName.PRIMARY);
            }

            break;

          case 'disabled':
            this.controlStatus(newProp.disabled);
            break;

          case 'iconCss':
            {
              if (span) {
                if (newProp.iconCss) {
                  span.className = 'e-btn-icon ' + newProp.iconCss;

                  if (this.element.textContent.trim()) {
                    if (this.iconPosition === 'Left') {
                      span.classList.add('e-icon-left');
                    } else {
                      span.classList.add('e-icon-right');
                    }
                  }
                } else {
                  sf.base.detach(span);
                }
              } else {
                this.setIconCss();
              }

              break;
            }

          case 'iconPosition':
            sf.base.removeClass([this.element], ['e-top-icon-btn', 'e-bottom-icon-btn']);
            span = this.element.querySelector('span.e-btn-icon');

            if (span) {
              sf.base.detach(span);
            }

            this.setIconCss();
            break;

          case 'cssClass':
            if (oldProp.cssClass) {
              sf.base.removeClass([this.element], oldProp.cssClass.split(' '));
            }

            if (newProp.cssClass) {
              sf.base.addClass([this.element], newProp.cssClass.split(' '));
            }

            break;

          case 'enableRtl':
            if (newProp.enableRtl) {
              this.element.classList.add(cssClassName.RTL);
            } else {
              this.element.classList.remove(cssClassName.RTL);
            }

            break;

          case 'content':
            {
              var node = sf.buttons.getTextNode(this.element);

              if (!node) {
                this.element.classList.remove(cssClassName.ICONBTN);
              }

              if (!sf.base.isBlazor() || sf.base.isBlazor() && !this.isServerRendered && this.getModuleName() !== 'progress-btn') {
                if (this.enableHtmlSanitizer) {
                  newProp.content = sf.base.SanitizeHtmlHelper.sanitize(newProp.content);
                }

                this.element.innerHTML = newProp.content;
                this.setIconCss();
              }

              break;
            }

          case 'isToggle':
            if (newProp.isToggle) {
              sf.base.EventHandler.add(this.element, 'click', this.btnClickHandler, this);
            } else {
              sf.base.EventHandler.remove(this.element, 'click', this.btnClickHandler);
              sf.base.removeClass([this.element], ['e-active']);
            }

            break;
        }
      }
    };
    /**
     * Click the button element
     * its native method
     *
     * @public
     * @returns {void}
     */


    Button.prototype.click = function () {
      this.element.click();
    };
    /**
     * Sets the focus to Button
     * its native method
     *
     * @public
     * @returns {void}
     */


    Button.prototype.focusIn = function () {
      this.element.focus();
    };

    __decorate([sf.base.Property('Left')], Button.prototype, "iconPosition", void 0);

    __decorate([sf.base.Property('')], Button.prototype, "iconCss", void 0);

    __decorate([sf.base.Property(false)], Button.prototype, "disabled", void 0);

    __decorate([sf.base.Property(false)], Button.prototype, "isPrimary", void 0);

    __decorate([sf.base.Property('')], Button.prototype, "cssClass", void 0);

    __decorate([sf.base.Property('')], Button.prototype, "content", void 0);

    __decorate([sf.base.Property(false)], Button.prototype, "isToggle", void 0);

    __decorate([sf.base.Property()], Button.prototype, "locale", void 0);

    __decorate([sf.base.Property(false)], Button.prototype, "enableHtmlSanitizer", void 0);

    __decorate([sf.base.Event()], Button.prototype, "created", void 0);

    Button = __decorate([sf.base.NotifyPropertyChanges], Button);
    return Button;
  }(sf.base.Component);
  /**
   * Button modules
   */


  exports.buttonObserver = buttonObserver;
  exports.Button = Button;
  return exports;
};

sf.buttons = sf.base.extend({}, sf.buttons, sfbutton({}));

/***/ })

/******/ });