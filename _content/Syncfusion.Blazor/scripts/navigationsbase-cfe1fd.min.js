/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "_content/Syncfusion.Blazor/scripts/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./bundles/navigationsbase.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./bundles/navigationsbase.js":
/*!************************************!*\
  !*** ./bundles/navigationsbase.js ***!
  \************************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_navigationsbase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/navigationsbase.js */ "./modules/navigationsbase.js");
/* harmony import */ var _modules_navigationsbase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_navigationsbase_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/navigationsbase.js":
/*!************************************!*\
  !*** ./modules/navigationsbase.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

window.sf = window.sf || {};

var navigationsbase = function navigationsbase(exports) {
  'use strict';

  var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
      _extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics(d, b);
    };

    return function (d, b) {
      _extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
      if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var CLS_ROOT = 'e-hscroll';
  var CLS_RTL = 'e-rtl';
  var CLS_DISABLE = 'e-overlay';
  var CLS_HSCROLLBAR = 'e-hscroll-bar';
  var CLS_HSCROLLCON = 'e-hscroll-content';
  var CLS_NAVARROW = 'e-nav-arrow';
  var CLS_NAVRIGHTARROW = 'e-nav-right-arrow';
  var CLS_NAVLEFTARROW = 'e-nav-left-arrow';
  var CLS_HSCROLLNAV = 'e-scroll-nav';
  var CLS_HSCROLLNAVRIGHT = 'e-scroll-right-nav';
  var CLS_HSCROLLNAVLEFT = 'e-scroll-left-nav';
  var CLS_DEVICE = 'e-scroll-device';
  var CLS_OVERLAY = 'e-scroll-overlay';
  var CLS_RIGHTOVERLAY = 'e-scroll-right-overlay';
  var CLS_LEFTOVERLAY = 'e-scroll-left-overlay';
  var OVERLAY_MAXWID = 40;
  /**
   * HScroll module is introduces horizontal scroller when content exceeds the current viewing area.
   * It can be useful for the components like Toolbar, Tab which needs horizontal scrolling alone.
   * Hidden content can be view by touch moving or icon click.
   * ```html
   * <div id="scroll"/>
   * <script>
   *   var scrollObj = new HScroll();
   *   scrollObj.appendTo("#scroll");
   * </script>
   * ```
   */

  var HScroll =
  /** @class */
  function (_super) {
    __extends(HScroll, _super);
    /**
     * Initializes a new instance of the HScroll class.
     *
     * @param {HScrollModel} options  - Specifies HScroll model properties as options.
     * @param {string | HTMLElement} element  - Specifies the element for which horizontal scrolling applies.
     */


    function HScroll(options, element) {
      return _super.call(this, options, element) || this;
    }
    /**
     * Initialize the event handler
     *
     * @private
     * @returns {void}
     */


    HScroll.prototype.preRender = function () {
      this.browser = sf.base.Browser.info.name;
      this.browserCheck = this.browser === 'mozilla';
      this.isDevice = sf.base.Browser.isDevice;
      this.customStep = true;
      var element = this.element;
      this.ieCheck = this.browser === 'edge' || this.browser === 'msie';
      this.initialize();

      if (element.id === '') {
        element.id = sf.base.getUniqueID('hscroll');
        this.uniqueId = true;
      }

      element.style.display = 'block';

      if (this.enableRtl) {
        element.classList.add(CLS_RTL);
      }
    };
    /**
     * To Initialize the horizontal scroll  rendering
     *
     * @private
     * @returns {void}
     */


    HScroll.prototype.render = function () {
      this.touchModule = new sf.base.Touch(this.element, {
        scroll: this.touchHandler.bind(this),
        swipe: this.swipeHandler.bind(this)
      });
      sf.base.EventHandler.add(this.scrollEle, 'scroll', this.scrollHandler, this);

      if (!this.isDevice) {
        this.createNavIcon(this.element);
      } else {
        this.element.classList.add(CLS_DEVICE);
        this.createOverlay(this.element);
      }

      this.setScrollState();
    };

    HScroll.prototype.setScrollState = function () {
      if (sf.base.isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {
        this.scrollStep = this.scrollEle.offsetWidth;
        this.customStep = false;
      } else {
        this.customStep = true;
      }
    };

    HScroll.prototype.initialize = function () {
      var scrollEle = this.createElement('div', {
        className: CLS_HSCROLLCON
      });
      var scrollDiv = this.createElement('div', {
        className: CLS_HSCROLLBAR
      });
      scrollDiv.setAttribute('tabindex', '-1');
      var ele = this.element;
      var innerEle = [].slice.call(ele.children);

      for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {
        var ele_1 = innerEle_1[_i];
        scrollEle.appendChild(ele_1);
      }

      scrollDiv.appendChild(scrollEle);
      ele.appendChild(scrollDiv);
      scrollDiv.style.overflowX = 'hidden';
      this.scrollEle = scrollDiv;
      this.scrollItems = scrollEle;
    };

    HScroll.prototype.getPersistData = function () {
      var keyEntity = ['scrollStep'];
      return this.addOnPersist(keyEntity);
    };
    /**
     * Returns the current module name.
     *
     * @returns {string} - It returns the current module name.
     * @private
     */


    HScroll.prototype.getModuleName = function () {
      return 'hScroll';
    };
    /**
     * Removes the control from the DOM and also removes all its related events.
     *
     * @returns {void}
     */


    HScroll.prototype.destroy = function () {
      var ele = this.element;
      ele.style.display = '';
      ele.classList.remove(CLS_ROOT);
      ele.classList.remove(CLS_DEVICE);
      var nav = sf.base.selectAll('.e-' + ele.id + '_nav.' + CLS_HSCROLLNAV, ele);
      var overlay = sf.base.selectAll('.' + CLS_OVERLAY, ele);
      [].slice.call(overlay).forEach(function (ele) {
        sf.base.detach(ele);
      });

      for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
        var elem = _a[_i];
        ele.appendChild(elem);
      }

      if (this.uniqueId) {
        this.element.removeAttribute('id');
      }

      sf.base.detach(this.scrollEle);

      if (nav.length > 0) {
        sf.base.detach(nav[0]);

        if (!sf.base.isNullOrUndefined(nav[1])) {
          sf.base.detach(nav[1]);
        }
      }

      sf.base.EventHandler.remove(this.scrollEle, 'scroll', this.scrollHandler);
      this.touchModule.destroy();
      this.touchModule = null;

      _super.prototype.destroy.call(this);
    };
    /**
     * Specifies the value to disable/enable the HScroll component.
     * When set to `true` , the component will be disabled.
     *
     * @param  {boolean} value - Based on this Boolean value, HScroll will be enabled (false) or disabled (true).
     * @returns {void}.
     */


    HScroll.prototype.disable = function (value) {
      var navEles = sf.base.selectAll('.e-scroll-nav:not(.' + CLS_DISABLE + ')', this.element);

      if (value) {
        this.element.classList.add(CLS_DISABLE);
      } else {
        this.element.classList.remove(CLS_DISABLE);
      }

      [].slice.call(navEles).forEach(function (el) {
        el.setAttribute('tabindex', !value ? '0' : '-1');
      });
    };

    HScroll.prototype.createOverlay = function (element) {
      var id = element.id.concat('_nav');
      var rightOverlayEle = this.createElement('div', {
        className: CLS_OVERLAY + ' ' + CLS_RIGHTOVERLAY
      });
      var clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT);
      var rightEle = this.createElement('div', {
        id: id.concat('_right'),
        className: clsRight
      });
      var navItem = this.createElement('div', {
        className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons'
      });
      rightEle.appendChild(navItem);
      var leftEle = this.createElement('div', {
        className: CLS_OVERLAY + ' ' + CLS_LEFTOVERLAY
      });

      if (this.ieCheck) {
        rightEle.classList.add('e-ie-align');
      }

      element.appendChild(rightOverlayEle);
      element.appendChild(rightEle);
      element.insertBefore(leftEle, element.firstChild);
      this.eventBinding([rightEle]);
    };

    HScroll.prototype.createNavIcon = function (element) {
      var id = element.id.concat('_nav');
      var clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT);
      var nav = this.createElement('div', {
        id: id.concat('_right'),
        className: clsRight
      });
      nav.setAttribute('aria-disabled', 'false');
      var navItem = this.createElement('div', {
        className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons'
      });
      var clsLeft = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVLEFT);
      var navEle = this.createElement('div', {
        id: id.concat('_left'),
        className: clsLeft + ' ' + CLS_DISABLE
      });
      navEle.setAttribute('aria-disabled', 'true');
      var navLeftItem = this.createElement('div', {
        className: CLS_NAVLEFTARROW + ' ' + CLS_NAVARROW + ' e-icons'
      });
      navEle.appendChild(navLeftItem);
      nav.appendChild(navItem);
      element.appendChild(nav);
      element.insertBefore(navEle, element.firstChild);

      if (this.ieCheck) {
        nav.classList.add('e-ie-align');
        navEle.classList.add('e-ie-align');
      }

      this.eventBinding([nav, navEle]);
    };

    HScroll.prototype.onKeyPress = function (e) {
      var _this = this;

      if (e.key === 'Enter') {
        var timeoutFun_1 = function timeoutFun_1() {
          _this.keyTimeout = true;

          _this.eleScrolling(10, e.target, true);
        };

        this.keyTimer = window.setTimeout(function () {
          timeoutFun_1();
        }, 100);
      }
    };

    HScroll.prototype.onKeyUp = function (e) {
      if (e.key !== 'Enter') {
        return;
      }

      if (this.keyTimeout) {
        this.keyTimeout = false;
      } else {
        e.target.click();
      }

      clearTimeout(this.keyTimer);
    };

    HScroll.prototype.eventBinding = function (ele) {
      var _this = this;

      [].slice.call(ele).forEach(function (el) {
        new sf.base.Touch(el, {
          tapHold: _this.tabHoldHandler.bind(_this),
          tapHoldThreshold: 500
        });
        el.addEventListener('keydown', _this.onKeyPress.bind(_this));
        el.addEventListener('keyup', _this.onKeyUp.bind(_this));
        el.addEventListener('mouseup', _this.repeatScroll.bind(_this));
        el.addEventListener('touchend', _this.repeatScroll.bind(_this));
        el.addEventListener('contextmenu', function (e) {
          e.preventDefault();
        });
        sf.base.EventHandler.add(el, 'click', _this.clickEventHandler, _this);
      });
    };

    HScroll.prototype.repeatScroll = function () {
      clearInterval(this.timeout);
    };

    HScroll.prototype.tabHoldHandler = function (e) {
      var _this = this;

      var trgt = e.originalEvent.target;
      trgt = this.contains(trgt, CLS_HSCROLLNAV) ? trgt.firstElementChild : trgt;
      var scrollDis = 10;

      var timeoutFun = function timeoutFun() {
        _this.eleScrolling(scrollDis, trgt, true);
      };

      this.timeout = window.setInterval(function () {
        timeoutFun();
      }, 50);
    };

    HScroll.prototype.contains = function (ele, className) {
      return ele.classList.contains(className);
    };

    HScroll.prototype.eleScrolling = function (scrollDis, trgt, isContinuous) {
      var rootEle = this.element;
      var classList$$1 = trgt.classList;

      if (classList$$1.contains(CLS_HSCROLLNAV)) {
        classList$$1 = trgt.querySelector('.' + CLS_NAVARROW).classList;
      }

      if (this.contains(rootEle, CLS_RTL) && this.browserCheck) {
        scrollDis = -scrollDis;
      }

      if (!this.contains(rootEle, CLS_RTL) || this.browserCheck || this.ieCheck) {
        if (classList$$1.contains(CLS_NAVRIGHTARROW)) {
          this.frameScrollRequest(scrollDis, 'add', isContinuous);
        } else {
          this.frameScrollRequest(scrollDis, '', isContinuous);
        }
      } else {
        if (classList$$1.contains(CLS_NAVLEFTARROW)) {
          this.frameScrollRequest(scrollDis, 'add', isContinuous);
        } else {
          this.frameScrollRequest(scrollDis, '', isContinuous);
        }
      }
    };

    HScroll.prototype.clickEventHandler = function (e) {
      this.eleScrolling(this.scrollStep, e.target, false);
    };

    HScroll.prototype.swipeHandler = function (e) {
      var swipeEle = this.scrollEle;
      var distance;

      if (e.velocity <= 1) {
        distance = e.distanceX / (e.velocity * 10);
      } else {
        distance = e.distanceX / e.velocity;
      }

      var start = 0.5;

      var animate = function animate() {
        var step = Math.sin(start);

        if (step <= 0) {
          window.cancelAnimationFrame(step);
        } else {
          if (e.swipeDirection === 'Left') {
            swipeEle.scrollLeft += distance * step;
          } else if (e.swipeDirection === 'Right') {
            swipeEle.scrollLeft -= distance * step;
          }

          start -= 0.5;
          window.requestAnimationFrame(animate);
        }
      };

      animate();
    };

    HScroll.prototype.scrollUpdating = function (scrollVal, action) {
      if (action === 'add') {
        this.scrollEle.scrollLeft += scrollVal;
      } else {
        this.scrollEle.scrollLeft -= scrollVal;
      }
    };

    HScroll.prototype.frameScrollRequest = function (scrollVal, action, isContinuous) {
      var _this = this;

      var step = 10;

      if (isContinuous) {
        this.scrollUpdating(scrollVal, action);
        return;
      }

      if (!this.customStep) {
        [].slice.call(sf.base.selectAll('.' + CLS_OVERLAY, this.element)).forEach(function (el) {
          scrollVal -= el.offsetWidth;
        });
      }

      var animate = function animate() {
        var scrollValue;
        var scrollStep;

        if (_this.contains(_this.element, CLS_RTL) && _this.browserCheck) {
          scrollValue = -scrollVal;
          scrollStep = -step;
        } else {
          scrollValue = scrollVal;
          scrollStep = step;
        }

        if (scrollValue < step) {
          window.cancelAnimationFrame(scrollStep);
        } else {
          _this.scrollUpdating(scrollStep, action);

          scrollVal -= scrollStep;
          window.requestAnimationFrame(animate);
        }
      };

      animate();
    };

    HScroll.prototype.touchHandler = function (e) {
      var ele = this.scrollEle;
      var distance = e.distanceX;

      if (this.ieCheck && this.contains(this.element, CLS_RTL)) {
        distance = -distance;
      }

      if (e.scrollDirection === 'Left') {
        ele.scrollLeft = ele.scrollLeft + distance;
      } else if (e.scrollDirection === 'Right') {
        ele.scrollLeft = ele.scrollLeft - distance;
      }
    };

    HScroll.prototype.arrowDisabling = function (addDisable, removeDisable) {
      if (this.isDevice) {
        var arrowEle = sf.base.isNullOrUndefined(addDisable) ? removeDisable : addDisable;
        var arrowIcon = arrowEle.querySelector('.' + CLS_NAVARROW);

        if (sf.base.isNullOrUndefined(addDisable)) {
          sf.base.classList(arrowIcon, [CLS_NAVRIGHTARROW], [CLS_NAVLEFTARROW]);
        } else {
          sf.base.classList(arrowIcon, [CLS_NAVLEFTARROW], [CLS_NAVRIGHTARROW]);
        }
      } else {
        addDisable.classList.add(CLS_DISABLE);
        addDisable.setAttribute('aria-disabled', 'true');
        addDisable.removeAttribute('tabindex');
        removeDisable.classList.remove(CLS_DISABLE);
        removeDisable.setAttribute('aria-disabled', 'false');
        removeDisable.setAttribute('tabindex', '0');
      }

      this.repeatScroll();
    };

    HScroll.prototype.scrollHandler = function (e) {
      var target = e.target;
      var width = target.offsetWidth;
      var rootEle = this.element;
      var navLeftEle = this.element.querySelector('.' + CLS_HSCROLLNAVLEFT);
      var navRightEle = this.element.querySelector('.' + CLS_HSCROLLNAVRIGHT);
      var leftOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY);
      var rightOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY);
      var scrollLeft = target.scrollLeft;

      if (scrollLeft <= 0) {
        scrollLeft = -scrollLeft;
      }

      if (this.isDevice) {
        if (this.enableRtl && !(this.browserCheck || this.ieCheck)) {
          leftOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY);
          rightOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY);
        }

        if (scrollLeft < OVERLAY_MAXWID) {
          leftOverlay.style.width = scrollLeft + 'px';
        } else {
          leftOverlay.style.width = '40px';
        }

        if (target.scrollWidth - Math.ceil(width + scrollLeft) < OVERLAY_MAXWID) {
          rightOverlay.style.width = target.scrollWidth - Math.ceil(width + scrollLeft) + 'px';
        } else {
          rightOverlay.style.width = '40px';
        }
      }

      if (scrollLeft === 0) {
        this.arrowDisabling(navLeftEle, navRightEle);
      } else if (Math.ceil(width + scrollLeft + .1) >= target.scrollWidth) {
        this.arrowDisabling(navRightEle, navLeftEle);
      } else {
        var disEle = this.element.querySelector('.' + CLS_HSCROLLNAV + '.' + CLS_DISABLE);

        if (disEle) {
          disEle.classList.remove(CLS_DISABLE);
          disEle.setAttribute('aria-disabled', 'false');
          disEle.setAttribute('tabindex', '0');
        }
      }
    };
    /**
     * Gets called when the model property changes.The data that describes the old and new values of property that changed.
     *
     * @param  {HScrollModel} newProp - It contains the new value of data.
     * @param  {HScrollModel} oldProp - It contains the old value of data.
     * @returns {void}
     * @private
     */


    HScroll.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'scrollStep':
            this.setScrollState();
            break;

          case 'enableRtl':
            newProp.enableRtl ? this.element.classList.add(CLS_RTL) : this.element.classList.remove(CLS_RTL);
            break;
        }
      }
    };

    __decorate([sf.base.Property(null)], HScroll.prototype, "scrollStep", void 0);

    HScroll = __decorate([sf.base.NotifyPropertyChanges], HScroll);
    return HScroll;
  }(sf.base.Component);

  var __extends$1 = undefined && undefined.__extends || function () {
    var _extendStatics2 = function extendStatics(d, b) {
      _extendStatics2 = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics2(d, b);
    };

    return function (d, b) {
      _extendStatics2(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
      if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var CLS_ROOT$1 = 'e-vscroll';
  var CLS_RTL$1 = 'e-rtl';
  var CLS_DISABLE$1 = 'e-overlay';
  var CLS_VSCROLLBAR = 'e-vscroll-bar';
  var CLS_VSCROLLCON = 'e-vscroll-content';
  var CLS_NAVARROW$1 = 'e-nav-arrow';
  var CLS_NAVUPARROW = 'e-nav-up-arrow';
  var CLS_NAVDOWNARROW = 'e-nav-down-arrow';
  var CLS_VSCROLLNAV = 'e-scroll-nav';
  var CLS_VSCROLLNAVUP = 'e-scroll-up-nav';
  var CLS_VSCROLLNAVDOWN = 'e-scroll-down-nav';
  var CLS_DEVICE$1 = 'e-scroll-device';
  var CLS_OVERLAY$1 = 'e-scroll-overlay';
  var CLS_UPOVERLAY = 'e-scroll-up-overlay';
  var CLS_DOWNOVERLAY = 'e-scroll-down-overlay';
  var OVERLAY_MAXWID$1 = 40;
  /**
   * VScroll module is introduces vertical scroller when content exceeds the current viewing area.
   * It can be useful for the components like Toolbar, Tab which needs vertical scrolling alone.
   * Hidden content can be view by touch moving or icon click.
   * ```html
   * <div id="scroll"/>
   * <script>
   *   var scrollObj = new VScroll();
   *   scrollObj.appendTo("#scroll");
   * </script>
   * ```
   */

  var VScroll =
  /** @class */
  function (_super) {
    __extends$1(VScroll, _super);
    /**
     * Initializes a new instance of the VScroll class.
     *
     * @param {VScrollModel} options  - Specifies VScroll model properties as options.
     * @param {string | HTMLElement} element  - Specifies the element for which vertical scrolling applies.
     */


    function VScroll(options, element) {
      return _super.call(this, options, element) || this;
    }
    /**
     * Initialize the event handler
     *
     * @private
     * @returns {void}
     */


    VScroll.prototype.preRender = function () {
      this.browser = sf.base.Browser.info.name;
      this.browserCheck = this.browser === 'mozilla';
      this.isDevice = sf.base.Browser.isDevice;
      this.customStep = true;
      var ele = this.element;
      this.ieCheck = this.browser === 'edge' || this.browser === 'msie';
      this.initialize();

      if (ele.id === '') {
        ele.id = sf.base.getUniqueID('vscroll');
        this.uniqueId = true;
      }

      ele.style.display = 'block';

      if (this.enableRtl) {
        ele.classList.add(CLS_RTL$1);
      }
    };
    /**
     * To Initialize the vertical scroll rendering
     *
     * @private
     * @returns {void}
     */


    VScroll.prototype.render = function () {
      this.touchModule = new sf.base.Touch(this.element, {
        scroll: this.touchHandler.bind(this),
        swipe: this.swipeHandler.bind(this)
      });
      sf.base.EventHandler.add(this.scrollEle, 'scroll', this.scrollEventHandler, this);

      if (!this.isDevice) {
        this.createNavIcon(this.element);
      } else {
        this.element.classList.add(CLS_DEVICE$1);
        this.createOverlayElement(this.element);
      }

      this.setScrollState();
      sf.base.EventHandler.add(this.element, 'wheel', this.wheelEventHandler, this);
    };

    VScroll.prototype.setScrollState = function () {
      if (sf.base.isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {
        this.scrollStep = this.scrollEle.offsetHeight;
        this.customStep = false;
      } else {
        this.customStep = true;
      }
    };

    VScroll.prototype.initialize = function () {
      var scrollCnt = sf.base.createElement('div', {
        className: CLS_VSCROLLCON
      });
      var scrollBar = sf.base.createElement('div', {
        className: CLS_VSCROLLBAR
      });
      scrollBar.setAttribute('tabindex', '-1');
      var ele = this.element;
      var innerEle = [].slice.call(ele.children);

      for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {
        var ele_1 = innerEle_1[_i];
        scrollCnt.appendChild(ele_1);
      }

      scrollBar.appendChild(scrollCnt);
      ele.appendChild(scrollBar);
      scrollBar.style.overflowY = 'hidden';
      this.scrollEle = scrollBar;
      this.scrollItems = scrollCnt;
    };

    VScroll.prototype.getPersistData = function () {
      var keyEntity = ['scrollStep'];
      return this.addOnPersist(keyEntity);
    };
    /**
     * Returns the current module name.
     *
     * @returns {string} - It returns the current module name.
     * @private
     */


    VScroll.prototype.getModuleName = function () {
      return 'vScroll';
    };
    /**
     * Removes the control from the DOM and also removes all its related events.
     *
     * @returns {void}
     */


    VScroll.prototype.destroy = function () {
      var el = this.element;
      el.style.display = '';
      sf.base.removeClass([this.element], [CLS_ROOT$1, CLS_DEVICE$1]);
      var navs = sf.base.selectAll('.e-' + el.id + '_nav.' + CLS_VSCROLLNAV, el);
      var overlays = sf.base.selectAll('.' + CLS_OVERLAY$1, el);
      [].slice.call(overlays).forEach(function (ele) {
        sf.base.detach(ele);
      });

      for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
        var elem = _a[_i];
        el.appendChild(elem);
      }

      if (this.uniqueId) {
        this.element.removeAttribute('id');
      }

      sf.base.detach(this.scrollEle);

      if (navs.length > 0) {
        sf.base.detach(navs[0]);

        if (!sf.base.isNullOrUndefined(navs[1])) {
          sf.base.detach(navs[1]);
        }
      }

      sf.base.EventHandler.remove(this.scrollEle, 'scroll', this.scrollEventHandler);
      this.touchModule.destroy();
      this.touchModule = null;

      _super.prototype.destroy.call(this);
    };
    /**
     * Specifies the value to disable/enable the VScroll component.
     * When set to `true` , the component will be disabled.
     *
     * @param  {boolean} value - Based on this Boolean value, VScroll will be enabled (false) or disabled (true).
     * @returns {void}.
     */


    VScroll.prototype.disable = function (value) {
      var navEle = sf.base.selectAll('.e-scroll-nav:not(.' + CLS_DISABLE$1 + ')', this.element);

      if (value) {
        this.element.classList.add(CLS_DISABLE$1);
      } else {
        this.element.classList.remove(CLS_DISABLE$1);
      }

      [].slice.call(navEle).forEach(function (el) {
        el.setAttribute('tabindex', !value ? '0' : '-1');
      });
    };

    VScroll.prototype.createOverlayElement = function (element) {
      var id = element.id.concat('_nav');
      var downOverlayEle = sf.base.createElement('div', {
        className: CLS_OVERLAY$1 + ' ' + CLS_DOWNOVERLAY
      });
      var clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);
      var downEle = sf.base.createElement('div', {
        id: id.concat('down'),
        className: clsDown
      });
      var navItem = sf.base.createElement('div', {
        className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW$1 + ' e-icons'
      });
      downEle.appendChild(navItem);
      var upEle = sf.base.createElement('div', {
        className: CLS_OVERLAY$1 + ' ' + CLS_UPOVERLAY
      });

      if (this.ieCheck) {
        downEle.classList.add('e-ie-align');
      }

      element.appendChild(downOverlayEle);
      element.appendChild(downEle);
      element.insertBefore(upEle, element.firstChild);
      this.eventBinding([downEle]);
    };

    VScroll.prototype.createNavIcon = function (element) {
      var id = element.id.concat('_nav');
      var clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);
      var nav = sf.base.createElement('div', {
        id: id.concat('_down'),
        className: clsDown
      });
      nav.setAttribute('aria-disabled', 'false');
      var navItem = sf.base.createElement('div', {
        className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW$1 + ' e-icons'
      });
      var clsUp = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVUP);
      var navElement = sf.base.createElement('div', {
        id: id.concat('_up'),
        className: clsUp + ' ' + CLS_DISABLE$1
      });
      navElement.setAttribute('aria-disabled', 'true');
      var navUpItem = sf.base.createElement('div', {
        className: CLS_NAVUPARROW + ' ' + CLS_NAVARROW$1 + ' e-icons'
      });
      navElement.appendChild(navUpItem);
      nav.appendChild(navItem);
      nav.setAttribute('tabindex', '0');
      element.appendChild(nav);
      element.insertBefore(navElement, element.firstChild);

      if (this.ieCheck) {
        nav.classList.add('e-ie-align');
        navElement.classList.add('e-ie-align');
      }

      this.eventBinding([nav, navElement]);
    };

    VScroll.prototype.onKeyPress = function (ev) {
      var _this = this;

      if (ev.key === 'Enter') {
        var timeoutFun_1 = function timeoutFun_1() {
          _this.keyTimeout = true;

          _this.eleScrolling(10, ev.target, true);
        };

        this.keyTimer = window.setTimeout(function () {
          timeoutFun_1();
        }, 100);
      }
    };

    VScroll.prototype.onKeyUp = function (ev) {
      if (ev.key !== 'Enter') {
        return;
      }

      if (this.keyTimeout) {
        this.keyTimeout = false;
      } else {
        ev.target.click();
      }

      clearTimeout(this.keyTimer);
    };

    VScroll.prototype.eventBinding = function (element) {
      var _this = this;

      [].slice.call(element).forEach(function (ele) {
        new sf.base.Touch(ele, {
          tapHold: _this.tabHoldHandler.bind(_this),
          tapHoldThreshold: 500
        });
        ele.addEventListener('keydown', _this.onKeyPress.bind(_this));
        ele.addEventListener('keyup', _this.onKeyUp.bind(_this));
        ele.addEventListener('mouseup', _this.repeatScroll.bind(_this));
        ele.addEventListener('touchend', _this.repeatScroll.bind(_this));
        ele.addEventListener('contextmenu', function (e) {
          e.preventDefault();
        });
        sf.base.EventHandler.add(ele, 'click', _this.clickEventHandler, _this);
      });
    };

    VScroll.prototype.repeatScroll = function () {
      clearInterval(this.timeout);
    };

    VScroll.prototype.tabHoldHandler = function (ev) {
      var _this = this;

      var trgt = ev.originalEvent.target;
      trgt = this.contains(trgt, CLS_VSCROLLNAV) ? trgt.firstElementChild : trgt;
      var scrollDistance = 10;

      var timeoutFun = function timeoutFun() {
        _this.eleScrolling(scrollDistance, trgt, true);
      };

      this.timeout = window.setInterval(function () {
        timeoutFun();
      }, 50);
    };

    VScroll.prototype.contains = function (element, className) {
      return element.classList.contains(className);
    };

    VScroll.prototype.eleScrolling = function (scrollDis, trgt, isContinuous) {
      var classList$$1 = trgt.classList;

      if (classList$$1.contains(CLS_VSCROLLNAV)) {
        classList$$1 = trgt.querySelector('.' + CLS_NAVARROW$1).classList;
      }

      if (classList$$1.contains(CLS_NAVDOWNARROW)) {
        this.frameScrollRequest(scrollDis, 'add', isContinuous);
      } else if (classList$$1.contains(CLS_NAVUPARROW)) {
        this.frameScrollRequest(scrollDis, '', isContinuous);
      }
    };

    VScroll.prototype.clickEventHandler = function (event) {
      this.eleScrolling(this.scrollStep, event.target, false);
    };

    VScroll.prototype.wheelEventHandler = function (e) {
      e.preventDefault();
      this.frameScrollRequest(this.scrollStep, e.deltaY > 0 ? 'add' : '', false);
    };

    VScroll.prototype.swipeHandler = function (e) {
      var swipeElement = this.scrollEle;
      var distance;

      if (e.velocity <= 1) {
        distance = e.distanceY / (e.velocity * 10);
      } else {
        distance = e.distanceY / e.velocity;
      }

      var start = 0.5;

      var animate = function animate() {
        var step = Math.sin(start);

        if (step <= 0) {
          window.cancelAnimationFrame(step);
        } else {
          if (e.swipeDirection === 'Up') {
            swipeElement.scrollTop += distance * step;
          } else if (e.swipeDirection === 'Down') {
            swipeElement.scrollTop -= distance * step;
          }

          start -= 0.02;
          window.requestAnimationFrame(animate);
        }
      };

      animate();
    };

    VScroll.prototype.scrollUpdating = function (scrollVal, action) {
      if (action === 'add') {
        this.scrollEle.scrollTop += scrollVal;
      } else {
        this.scrollEle.scrollTop -= scrollVal;
      }
    };

    VScroll.prototype.frameScrollRequest = function (scrollValue, action, isContinuous) {
      var _this = this;

      var step = 10;

      if (isContinuous) {
        this.scrollUpdating(scrollValue, action);
        return;
      }

      if (!this.customStep) {
        [].slice.call(sf.base.selectAll('.' + CLS_OVERLAY$1, this.element)).forEach(function (el) {
          scrollValue -= el.offsetHeight;
        });
      }

      var animate = function animate() {
        if (scrollValue < step) {
          window.cancelAnimationFrame(step);
        } else {
          _this.scrollUpdating(step, action);

          scrollValue -= step;
          window.requestAnimationFrame(animate);
        }
      };

      animate();
    };

    VScroll.prototype.touchHandler = function (e) {
      var el = this.scrollEle;
      var distance = e.distanceY;

      if (e.scrollDirection === 'Up') {
        el.scrollTop = el.scrollTop + distance;
      } else if (e.scrollDirection === 'Down') {
        el.scrollTop = el.scrollTop - distance;
      }
    };

    VScroll.prototype.arrowDisabling = function (addDisableCls, removeDisableCls) {
      if (this.isDevice) {
        var arrowEle = sf.base.isNullOrUndefined(addDisableCls) ? removeDisableCls : addDisableCls;
        var arrowIcon = arrowEle.querySelector('.' + CLS_NAVARROW$1);

        if (sf.base.isNullOrUndefined(addDisableCls)) {
          sf.base.classList(arrowIcon, [CLS_NAVDOWNARROW], [CLS_NAVUPARROW]);
        } else {
          sf.base.classList(arrowIcon, [CLS_NAVUPARROW], [CLS_NAVDOWNARROW]);
        }
      } else {
        addDisableCls.classList.add(CLS_DISABLE$1);
        addDisableCls.setAttribute('aria-disabled', 'true');
        addDisableCls.removeAttribute('tabindex');
        removeDisableCls.classList.remove(CLS_DISABLE$1);
        removeDisableCls.setAttribute('aria-disabled', 'false');
        removeDisableCls.setAttribute('tabindex', '0');
      }

      this.repeatScroll();
    };

    VScroll.prototype.scrollEventHandler = function (e) {
      var target = e.target;
      var height = target.offsetHeight;
      var navUpEle = this.element.querySelector('.' + CLS_VSCROLLNAVUP);
      var navDownEle = this.element.querySelector('.' + CLS_VSCROLLNAVDOWN);
      var upOverlay = this.element.querySelector('.' + CLS_UPOVERLAY);
      var downOverlay = this.element.querySelector('.' + CLS_DOWNOVERLAY);
      var scrollTop = target.scrollTop;

      if (scrollTop <= 0) {
        scrollTop = -scrollTop;
      }

      if (this.isDevice) {
        if (scrollTop < OVERLAY_MAXWID$1) {
          upOverlay.style.height = scrollTop + 'px';
        } else {
          upOverlay.style.height = '40px';
        }

        if (target.scrollHeight - Math.ceil(height + scrollTop) < OVERLAY_MAXWID$1) {
          downOverlay.style.height = target.scrollHeight - Math.ceil(height + scrollTop) + 'px';
        } else {
          downOverlay.style.height = '40px';
        }
      }

      if (scrollTop === 0) {
        this.arrowDisabling(navUpEle, navDownEle);
      } else if (Math.ceil(height + scrollTop + .1) >= target.scrollHeight) {
        this.arrowDisabling(navDownEle, navUpEle);
      } else {
        var disEle = this.element.querySelector('.' + CLS_VSCROLLNAV + '.' + CLS_DISABLE$1);

        if (disEle) {
          disEle.classList.remove(CLS_DISABLE$1);
          disEle.setAttribute('aria-disabled', 'false');
          disEle.setAttribute('tabindex', '0');
        }
      }
    };
    /**
     * Gets called when the model property changes.The data that describes the old and new values of property that changed.
     *
     * @param  {VScrollModel} newProp - It contains the new value of data.
     * @param  {VScrollModel} oldProp - It contains the old value of data.
     * @returns {void}
     * @private
     */


    VScroll.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'scrollStep':
            this.setScrollState();
            break;

          case 'enableRtl':
            if (newProp.enableRtl) {
              this.element.classList.add(CLS_RTL$1);
            } else {
              this.element.classList.remove(CLS_RTL$1);
            }

            break;
        }
      }
    };

    __decorate$1([sf.base.Property(null)], VScroll.prototype, "scrollStep", void 0);

    VScroll = __decorate$1([sf.base.NotifyPropertyChanges], VScroll);
    return VScroll;
  }(sf.base.Component);
  /**
   * Used to add scroll in menu.
   *
   * @param {createElementType} createElement - Specifies the create element model
   * @param {HTMLElement} container - Specifies the element container
   * @param {HTMLElement} content - Specifies the content element
   * @param {string} scrollType - Specifies the scroll type
   * @param {boolean} enableRtl - Specifies the enable RTL property
   * @param {boolean} offset - Specifies the offset value
   * @returns {HTMLElement} - Element
   * @hidden
   */


  function addScrolling(createElement$$1, container, content, scrollType, enableRtl, offset) {
    var containerOffset;
    var contentOffset;
    var parentElem = container.parentElement;

    if (scrollType === 'vscroll') {
      containerOffset = offset || container.getBoundingClientRect().height;
      contentOffset = content.getBoundingClientRect().height;
    } else {
      containerOffset = container.getBoundingClientRect().width;
      contentOffset = content.getBoundingClientRect().width;
    }

    if (containerOffset < contentOffset) {
      return createScrollbar(createElement$$1, container, content, scrollType, enableRtl, offset);
    } else if (parentElem) {
      var width = parentElem.getBoundingClientRect().width;

      if (width < containerOffset && scrollType === 'hscroll') {
        contentOffset = width;
        container.style.maxWidth = width + 'px';
        return createScrollbar(createElement$$1, container, content, scrollType, enableRtl, offset);
      }

      return content;
    } else {
      return content;
    }
  }
  /**
   * Used to create scroll bar in menu.
   *
   * @param {createElementType} createElement - Specifies the create element model
   * @param {HTMLElement} container - Specifies the element container
   * @param {HTMLElement} content - Specifies the content element
   * @param {string} scrollType - Specifies the scroll type
   * @param {boolean} enableRtl - Specifies the enable RTL property
   * @param {boolean} offset - Specifies the offset value
   * @returns {HTMLElement} - Element
   * @hidden
   */


  function createScrollbar(createElement$$1, container, content, scrollType, enableRtl, offset) {
    var scrollEle = createElement$$1('div', {
      className: 'e-menu-' + scrollType
    });
    container.appendChild(scrollEle);
    scrollEle.appendChild(content);

    if (offset) {
      scrollEle.style.overflow = 'hidden';
      scrollEle.style.height = offset + 'px';
    } else {
      scrollEle.style.maxHeight = container.style.maxHeight;
      container.style.overflow = 'hidden';
    }

    var scrollObj;

    if (scrollType === 'vscroll') {
      scrollObj = new VScroll({
        enableRtl: enableRtl
      }, scrollEle);
      scrollObj.scrollStep = sf.base.select('.e-' + scrollType + '-bar', container).offsetHeight / 2;
    } else {
      scrollObj = new HScroll({
        enableRtl: enableRtl
      }, scrollEle);
      scrollObj.scrollStep = sf.base.select('.e-' + scrollType + '-bar', container).offsetWidth;
    }

    return scrollEle;
  }
  /**
   * Used to destroy the scroll option.
   *
   * @param {VScroll | HScroll} scrollObj - Specifies the scroller object
   * @param {Element} element - Specifies the element
   * @param {HTMLElement} skipEle - Specifies the skip  element
   * @returns {void}
   * @hidden
   */


  function destroyScroll(scrollObj, element, skipEle) {
    if (scrollObj) {
      var menu = sf.base.select('.e-menu-parent', element);

      if (menu) {
        if (!skipEle || skipEle === menu) {
          scrollObj.destroy();
          element.parentElement.appendChild(menu);
          sf.base.detach(element);
        }
      } else {
        scrollObj.destroy();
        sf.base.detach(element);
      }
    }
  }

  exports.HScroll = HScroll;
  exports.VScroll = VScroll;
  exports.addScrolling = addScrolling;
  exports.destroyScroll = destroyScroll;
  return exports;
};

window.sf.navigations = window.sf.base.extend({}, window.sf.navigations, navigationsbase({}));

/***/ })

/******/ });