/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "_content/Syncfusion.Blazor/scripts/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./bundles/syncfusion-blazor-extended.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/@babel/runtime/regenerator/index.js":
/*!***********************************************************!*\
  !*** ../node_modules/@babel/runtime/regenerator/index.js ***!
  \***********************************************************/
/*! no static exports found */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "../node_modules/regenerator-runtime/runtime.js");

/***/ }),

/***/ "../node_modules/regenerator-runtime/runtime.js":
/*!******************************************************!*\
  !*** ../node_modules/regenerator-runtime/runtime.js ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }

  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};

  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };

  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  exports.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function () {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function (record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  }; // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.

  return exports;
}( // If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
 true ? module.exports : undefined);

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

/***/ }),

/***/ "./bundles/syncfusion-blazor-extended.js":
/*!***********************************************!*\
  !*** ./bundles/syncfusion-blazor-extended.js ***!
  \***********************************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_syncfusion_blazor_extended_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/syncfusion-blazor-extended.js */ "./modules/syncfusion-blazor-extended.js");


/***/ }),

/***/ "./modules/syncfusion-blazor-extended.js":
/*!***********************************************!*\
  !*** ./modules/syncfusion-blazor-extended.js ***!
  \***********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _syncfusion_blazor_extended_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../syncfusion-blazor-extended.js */ "./syncfusion-blazor-extended.js");


/***/ }),

/***/ "./syncfusion-blazor-extended.js":
/*!***************************************!*\
  !*** ./syncfusion-blazor-extended.js ***!
  \***************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "../node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var extended = {
  modules: {},
  tempCallBacks: [],
  dataSourceProperties: ["dataSource", "dataSource_custom", "shapeData"],
  enableRtl: function enableRtl(status) {
    sf.base.enableRtl(status);
  },
  loadCldr: function loadCldr(cultureData) {
    sf.base.loadCldr(JSON.parse(cultureData));
  },
  setCulture: function setCulture(cultureName, cultureFormats) {
    sf.base.setCulture(cultureName);
    sf.base.extend(sf.base.blazorCultureFormats, cultureFormats);
  },
  convertOptions: function convertOptions(options, isInitialRendering) {
    var output = {};

    for (var prop in options) {
      var props = prop.trim().split('.'),
          nestedObj = output;

      for (var i = 0; i < props.length - 1; i++) {
        var isArray = props[i].match(/^(\w+)\[(\d+)\]$/); // is array 

        if (isArray) {
          var arr = nestedObj[isArray[1]];
          if (!arr) arr = nestedObj[isArray[1]] = [];
          nestedObj = arr[isArray[2]] = arr[isArray[2]] || {};
        } else {
          nestedObj = nestedObj[props[i]] = nestedObj[props[i]] || {};
        }
      }

      nestedObj[props[i]] = options[prop];
      if (isInitialRendering) delete options[prop];
    }

    return output;
  },
  convertInitialOptions: function convertInitialOptions(options) {
    options = sfBlazor.convertOptions(JSON.parse(options), true);
    return JSON.stringify(options);
  },
  initialize: function initialize(id, options, events, namespace, dotnet, bindableProps, htmlAttributes, templateRefs, interopAdaptor, localeText) {
    try {
      if (namespace == null) {
        return;
      }

      if (localeText && localeText.length) {
        sfBlazor.load(localeText);
      }

      if (namespace == 'sf.popups.Spinner') {
        return;
      }

      sf.base.enableBlazorMode();

      if (!window.BlazorAdaptor && sf.data && _typeof(sf.data) === 'object') {
        sfBlazor.initBlazorAdaptor();
      }

      options = sfBlazor.convertInitialOptions(options);
      var dotnetObj = {
        dotnetInstance: dotnet,
        templateRefs: templateRefs
      };
      options = JSON.parse(options, sfBlazor.parseRevive.bind(dotnetObj));
      options["elementID"] = "_ejs" + id;
      var type = sf.base.getValue(namespace, window);
      sfBlazor.bindEvents(options, events, dotnet, namespace);

      if (type) {
        var comp = new type(options);
      }

      if (comp) {
        comp.isServerRendered = true;
        comp._dotnetInstance = dotnet;
        comp.templateDotnetInstance = templateRefs;
        comp.interopAdaptor = interopAdaptor; // var change = comp.saveChanges;
        // comp._saveChanges = change.bind(comp);

        comp.bindableProps = bindableProps = JSON.parse(bindableProps); // comp.saveChanges = sfBlazor.updateModel.bind(comp);

        if (htmlAttributes) {
          var element = document.getElementById(id);

          for (var attr in htmlAttributes) {
            element.setAttribute(attr, htmlAttributes[attr]);
          }
        }

        if (namespace == 'sf.pdfviewer.PdfViewer') {
          if (comp.serviceUrl == null) {
            sf.pdfviewer.AjaxHandler.prototype.send = sfBlazor.requestHandler.bind(comp);
          }
        }

        if (namespace == 'sf.documenteditor.DocumentEditorContainer' || namespace == 'sf.documenteditor.DocumentEditor') {
          if (comp.serviceUrl == null || comp.serviceUrl == "" || comp.serviceUrl == undefined) {
            sf.documenteditor.XmlHttpRequestHandler.prototype.send = sfBlazor.docEditRequestHandler.bind(comp);
          }
        }

        comp.appendTo("#" + id);
      }
    } catch (e) {
      sfBlazor.throwError(e, namespace);
    }
  },
  load: function load(localeObject) {
    sf.base.L10n.load(JSON.parse(localeObject));
  },
  renderComplete: function renderComplete(element, blazorElement) {
    if (element != null) {
      if (window[element] && (window[element.id] instanceof element || window[element.id] instanceof HTMLElement)) {
        delete window[element.id];
      }

      element.classList.remove("e-blazor-hidden");
    }
  },
  isDataSourceProperty: function isDataSourceProperty(key) {
    return sfBlazor.dataSourceProperties.indexOf(key) !== -1;
  },
  setModel: function setModel(id, options, namespace) {
    try {
      var compElement = document.getElementById(id);

      if (!compElement) {
        return;
      }

      var comp = compElement.ej2_instances[0];
      var componentObject = {};
      comp.preventUpdate = true;
      sfBlazor.updateOldProperties(comp, options);
      var dotnetObj = {
        dotnetInstance: comp._dotnetInstance
      };
      componentObject = sfBlazor.getCompObject(comp, options, dotnetObj, namespace);
      comp.setProperties(componentObject);
      comp.dataBind();
      comp.preventUpdate = false;
    } catch (e) {
      window.sfBlazor.throwError(e, comp);
    }
  },
  getCompObject: function getCompObject(comp, options, dotnetObj, namespace) {
    var compObject = sfBlazor.getModelObject(comp, options, dotnetObj, false);

    if (!compObject) {
      return;
    }

    var modelKeys = Object.keys(compObject);

    for (var i = 0; i < modelKeys.length; i++) {
      var key = modelKeys[i];
      var modelValue = comp[key];
      var newValue = compObject[key];
      var isParentArray = modelValue && modelValue.isComplexArray;
      var currentIndex = newValue && _typeof(newValue) === 'object' && Object.keys(newValue)[0];

      if (!(modelValue instanceof sf.base.ChildProperty) && !isParentArray || isNaN(currentIndex)) {
        continue;
      }

      var childValue;
      var childModel = newValue[currentIndex];

      if (!Array.isArray(newValue) && childModel && childModel.isNewComponent) {
        var childNameType = key.charAt(0).toUpperCase() + key.substr(1, key.length);
        var childName = namespace.split('.').splice(0, 2).join('.') + "." + childNameType;
        var childType = sf.base.getValue(childName, window);

        if (childType) {
          childValue = sf.base.createInstance(childType, [comp, key, childModel, isParentArray]);
        }
      }

      if (childValue) {
        compObject[key][currentIndex] = childValue;

        if (comp[key] && Array.isArray(comp[key])) {
          comp[key].filter(function (item, index) {
            if (currentIndex !== index) {
              compObject[key][index] = item;
            }
          });
        }
      }
    }

    return compObject;
  },
  getModelObject: function getModelObject(comp, props, dotnetObj, isOldProp) {
    var modelObject = {};
    var propKeys = props.match(/"(.*?)":/g);

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i].replace(":", "").replace(/"/g, "");
      var convertedProperties = sfBlazor.convertInitialOptions(props);
      var value = isOldProp ? sf.base.getValue(key, comp) : sf.base.getValue(key, JSON.parse(convertedProperties, sfBlazor.parseRevive.bind(dotnetObj)));

      if (value !== undefined) {
        key = key.split(/\[(\d+)\]/).join(".").replace(/\.\./g, ".");
        var propObj = sfBlazor.getNestedObject(comp, key, value);
        sf.base.extend(modelObject, {}, propObj.model, true);

        if (!isOldProp) {
          comp["deepMerge"] = comp["deepMerge"] ? Array.from(new Set(comp.deepMerge.concat(propObj.deepMerge))) : propObj.deepMerge;
        }
      }
    }

    return modelObject;
  },
  updateOldProperties: function updateOldProperties(comp, props) {
    var oldProps = sfBlazor.getModelObject(comp, props, null, true);
    sf.base.extend(comp.oldProperties, {}, oldProps, true);
  },
  getNestedObject: function getNestedObject(actualParent, key, value, parent) {
    var model = parent ? parent : {};
    var deepMerge = [];

    if (key.indexOf(".") !== -1) {
      var splitKeys = key.split(".");

      if (deepMerge.indexOf(splitKeys[0]) === -1) {
        deepMerge.push(splitKeys[0]);
      }

      for (var i = 0; i < splitKeys.length; i++) {
        var nestedValue = i === splitKeys.length - 1 ? value : {};
        var parentObj = i === 0 ? model : parentObj[splitKeys[i - 1]];
        actualParent = i === 0 ? actualParent : actualParent[splitKeys[i - 1]];
        parentObj = sfBlazor.getNestedObject(actualParent, splitKeys[i], nestedValue, parentObj, splitKeys[i + 1]).model;
      }
    } else {
      model[key] = value;
    }

    return {
      model: model,
      deepMerge: deepMerge
    };
  },
  updateModel: function () {
    var _updateModel = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(comp) {
      var bulkChanges, updatedModel;
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;

              if (!(!comp.isRendered || comp.preventUpdate || !comp._dotnetInstance)) {
                _context.next = 3;
                break;
              }

              return _context.abrupt("return");

            case 3:
              bulkChanges = sfBlazor.copyWithoutCircularReferences([comp.bulkChanges], comp.bulkChanges);
              updatedModel = sfBlazor.getUpdatedValue(comp, bulkChanges);
              _context.next = 7;
              return comp._dotnetInstance.invokeMethodAsync('UpdateModel', updatedModel);

            case 7:
              comp.preventUpdate = false;
              _context.next = 13;
              break;

            case 10:
              _context.prev = 10;
              _context.t0 = _context["catch"](0);
              window.sfBlazor.throwError(_context.t0, comp);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 10]]);
    }));

    function updateModel(_x) {
      return _updateModel.apply(this, arguments);
    }

    return updateModel;
  }(),
  getUpdatedValue: function getUpdatedValue(comp, changedProperties) {
    var updatedModel = {};
    var ignoreKeys = ["query", "formatter"];
    var changedPropertyKeys = Object.keys(changedProperties);

    for (var i = 0; i < changedPropertyKeys.length; i++) {
      var key = changedPropertyKeys[i];
      var modelValue = changedProperties[key];

      if (ignoreKeys.indexOf(key) !== -1) {
        continue;
      }

      if (sfBlazor.isChildProperty(comp, key)) {
        updatedModel[key] = sfBlazor.getUpdatedValue(comp, modelValue);
      } else if (_typeof(modelValue) === "object" && modelValue !== null && !(modelValue instanceof Date) && !(Array.isArray(modelValue) && modelValue[0] instanceof Date)) {
        modelValue = JSON.stringify(modelValue);
        updatedModel[key] = modelValue;
      } else {
        updatedModel[key] = modelValue;
      }
    }

    return updatedModel;
  },
  isChildProperty: function isChildProperty(comp, key) {
    return comp.properties && comp.properties[key] && comp.properties[key].parentObj !== undefined;
  },
  // start region diagram methods
  updateBlazorProperties: function updateBlazorProperties(object, component) {
    component._dotnetInstance.invokeMethodAsync('UpdateBlazorDiagramObjects', object);
  },
  updateBlazorDiagramEvents: function () {
    var _updateBlazorDiagramEvents = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2(object, component) {
      var data;
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return component._dotnetInstance.invokeMethodAsync('UpdateBlazorDiagramEvents', object);

            case 3:
              data = _context2.sent;

              if (data && typeof data === "string") {
                data = JSON.parse(data);
              }

              _context2.next = 10;
              break;

            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2["catch"](0);
              window.sfBlazor.throwError(_context2.t0, this);

            case 10:
              return _context2.abrupt("return", data);

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 7]]);
    }));

    function updateBlazorDiagramEvents(_x2, _x3) {
      return _updateBlazorDiagramEvents.apply(this, arguments);
    }

    return updateBlazorDiagramEvents;
  }(),
  callDiagramMethod: function () {
    var _callDiagramMethod = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3(args, compID) {
      var comp;
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              comp = document.getElementById(compID) && document.getElementById(compID).ej2_instances[0];

              if (args.methodName === "updateDiagramObjects") {
                args.obj = JSON.parse(args.obj, sfBlazor.parseRevive);
              }

              return _context3.abrupt("return", comp.callFromServer(args));

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function callDiagramMethod(_x4, _x5) {
      return _callDiagramMethod.apply(this, arguments);
    }

    return callDiagramMethod;
  }(),
  // end region diagram methods
  updateTemplate: function updateTemplate(name, templateData, templateId, comp, promise) {
    if (comp === undefined) {
      comp = {};
    }

    if (promise) {
      window.sfBlazor.tempCallBacks.push({
        Id: templateId,
        Promise: promise
      });
    }

    var cloneTemplateData = [];
    var blazIds = [];
    var innerTemplates = [];

    if (!sf.base.isNullOrUndefined(templateData) && templateData.length && !sf.base.isNullOrUndefined(templateData[0].BlazId)) {
      for (var i = 0; i < templateData.length; i++) {
        blazIds.push(templateData[i].BlazId);
        innerTemplates.push(templateData[i].BlazorTemplateId);
      }
    } else if (!sf.base.isNullOrUndefined(templateData)) {
      for (var i = 0; i < templateData.length; i++) {
        innerTemplates.push(templateData[i].BlazorTemplateId); // var innerTemplate = document.getElementById(innerTemplates[i]);

        cloneTemplateData.push(JSON.parse(window.sfBlazor.cleanStringify(templateData[i])));
        delete cloneTemplateData[i].BlazorTemplateId;
      }
    }

    var intervalId = setInterval(function () {
      var templateInstance = comp.templateDotnetInstance ? comp.templateDotnetInstance[name] || window.sfBlazor.templateDotnetInstance[comp.guid || name] : window.sfBlazor.templateDotnetInstance ? window.sfBlazor.templateDotnetInstance[comp.guid || name] : null;

      if (!templateInstance) {
        if (comp.templateDotnetInstance && !window.sfBlazor.templateDotnetInstance[comp.guid || name]) {
          return;
        } else if (comp.parentObj && comp.parentObj.templateDotnetInstance && comp.parentObj.templateDotnetInstance[name]) {
          templateInstance = comp.parentObj.templateDotnetInstance[name];
        } else {
          return;
        }
      }

      if (templateInstance) {
        templateInstance.invokeMethodAsync("UpdateTemplate", name, JSON.stringify(cloneTemplateData), templateId, innerTemplates, blazIds);
        clearInterval(intervalId);
      }
    }, 10);
  },
  setTemplateInstance: function setTemplateInstance(namespace, dotnetInstance, guid) {
    if (!sfBlazor.templateDotnetInstance) {
      sfBlazor.templateDotnetInstance = [];
    }

    sfBlazor.templateDotnetInstance[guid || namespace] = dotnetInstance;
  },
  setTemplate: function setTemplate(templateId, name) {
    setTimeout(function () {
      if (templateId != null) {
        var template = document.getElementById(templateId);
        var innerTemplates = template.getElementsByClassName("blazor-inner-template");

        for (var i = 0; i < innerTemplates.length; i++) {
          var tempId = innerTemplates[i].getAttribute("data-templateid");
          var tempElement = document.getElementById(tempId);

          if (tempElement && innerTemplates[i].childNodes) {
            var length = innerTemplates[i].childNodes.length;

            for (var j = 0; j < length; j++) {
              tempElement.appendChild(innerTemplates[i].childNodes[0]);
            }
          } else if (tempElement) {
            tempElement.innerHTML = innerTemplates[i].innerHTML;
          }
        }

        if (window.sfBlazor.tempCallBacks.length) {
          for (var p = 0; p < window.sfBlazor.tempCallBacks.length; p++) {
            if (window.sfBlazor.tempCallBacks[p].Id == templateId) {
              window.sfBlazor.tempCallBacks[p].Promise(window.sfBlazor.tempCallBacks[p].Id);
              window.sfBlazor.tempCallBacks.splice(p, 1);
            }
          }
        }
      }
    }, 100);
  },
  invokeMethod: function () {
    var _invokeMethod = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee4(elementId, methodName, moduleName, args, element) {
      var returnValue, comp;
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              returnValue = null;
              args = JSON.parse(args, sfBlazor.parseRevive);
              comp = document.getElementById(elementId) && document.getElementById(elementId).ej2_instances && document.getElementById(elementId).ej2_instances[0];

              if (methodName === "destroy" && comp) {
                comp._dotnetInstance = null;
              }

              if (element) {
                args.push(element);
              }

              if (!comp) {
                _context4.next = 23;
                break;
              }

              if (!(moduleName === null)) {
                _context4.next = 11;
                break;
              }

              returnValue = comp[methodName].apply(comp, args);
              _context4.next = 17;
              break;

            case 11:
              comp = sfBlazor.getDocEditor(comp, moduleName);
              comp = window.sfBlazor.getChildModule(comp, moduleName);
              returnValue = comp[methodName].apply(comp, args);
              _context4.next = 16;
              return sfBlazor.promiseHandler(returnValue);

            case 16:
              returnValue = _context4.sent;

            case 17:
              if (returnValue && _typeof(returnValue) === "object" && !(returnValue instanceof Promise)) {
                returnValue = sfBlazor.cleanStringify(returnValue);
              }

              if (!(comp.getModuleName() == 'PdfViewer' && methodName == 'saveAsBlob' && returnValue instanceof Promise)) {
                _context4.next = 22;
                break;
              }

              _context4.next = 21;
              return sfBlazor.promiseHandler(returnValue);

            case 21:
              returnValue = _context4.sent;

            case 22:
              return _context4.abrupt("return", returnValue);

            case 23:
              _context4.next = 28;
              break;

            case 25:
              _context4.prev = 25;
              _context4.t0 = _context4["catch"](0);
              return _context4.abrupt("return", window.sfBlazor.throwError(_context4.t0, comp));

            case 28:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, null, [[0, 25]]);
    }));

    function invokeMethod(_x6, _x7, _x8, _x9, _x10) {
      return _invokeMethod.apply(this, arguments);
    }

    return invokeMethod;
  }(),
  promiseHandler: function () {
    var _promiseHandler = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee6(returnValue) {
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (!(returnValue instanceof Promise)) {
                _context6.next = 3;
                break;
              }

              _context6.next = 3;
              return returnValue.then( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee5(data) {
                  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          if (!(data instanceof Blob)) {
                            _context5.next = 5;
                            break;
                          }

                          _context5.next = 3;
                          return window.sfBlazor.docEditFileReader(data).then(function (dataUrl) {
                            returnValue = JSON.stringify({
                              "data": dataUrl.substr(dataUrl.indexOf(',') + 1)
                            });
                          });

                        case 3:
                          _context5.next = 6;
                          break;

                        case 5:
                          returnValue = data;

                        case 6:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }));

                return function (_x12) {
                  return _ref.apply(this, arguments);
                };
              }());

            case 3:
              return _context6.abrupt("return", returnValue);

            case 4:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    function promiseHandler(_x11) {
      return _promiseHandler.apply(this, arguments);
    }

    return promiseHandler;
  }(),
  getDocEditor: function getDocEditor(comp, moduleName) {
    return comp.getModuleName() === "DocumentEditorContainer" && moduleName !== "documentEditor" ? comp.documentEditor : comp;
  },
  getChildModule: function getChildModule(comp, moduleName) {
    try {
      var path = moduleName.split(',');

      for (var i = 0; i < path.length; i++) {
        comp = comp[path[i]];
      }

      return comp;
    } catch (e) {
      window.sfBlazor.throwError(e, comp);
    }
  },
  getMethodCall: function getMethodCall(elementId, moduleName, methodName) {
    try {
      var comp = document.getElementById(elementId) && document.getElementById(elementId).ej2_instances[0];
      comp = sfBlazor.getDocEditor(comp);

      if (moduleName == null || moduleName == "null") {
        return comp[methodName];
      } else {
        comp = window.sfBlazor.getChildModule(comp, moduleName);
        return comp[methodName];
      }
    } catch (e) {
      window.sfBlazor.throwError(e, comp);
    }
  },
  setMethodCall: function setMethodCall(elementId, moduleName, methodName, args) {
    try {
      var comp = document.getElementById(elementId) && document.getElementById(elementId).ej2_instances[0];
      comp = sfBlazor.getDocEditor(comp);
      comp = window.sfBlazor.getChildModule(comp, moduleName);
      comp[methodName] = args[0];
    } catch (e) {
      window.sfBlazor.throwError(e, comp);
    }
  },
  methodCall: function methodCall(elementId, moduleName, methodName, args) {
    try {
      var comp = document.getElementById(elementId) && document.getElementById(elementId).ej2_instances[0];
      comp = window.sfBlazor.getChildModule(comp, moduleName);
      comp[methodName].apply(comp, [args]);
    } catch (e) {
      window.sfBlazor.throwError(e, comp);
    }
  },
  parseRevive: function parseRevive(key, value) {
    var dateRegex = new RegExp(/(\d{4})-(\d{2})-(\d{2})T(\d{2})\:(\d{2})\:(\d{2}).*/);
    var arrayRegex = new RegExp(/^\[.*?\]$/);
    var objectRegex = new RegExp(/^\{.*?\}$/);

    if (key === "" && value && value.dataSource_custom) {
      value.dataSource_custom.key = value.dataSource.key;
      value.dataSource = value.dataSource_custom;
    }

    if (value && typeof value === "string" && (value.indexOf("sf.data.Query()") !== -1 || key === "formatter")) {
      try {
        return eval(value);
      } catch (e) {
        var funValue = sfBlazor.getEvaluatedFunc(value);
        return funValue;
      }
    } else if (sfBlazor.isDataSourceProperty(key)) {
      if (value === null) return;
      value = typeof value === "string" ? JSON.parse(value) : value;

      if (!value.adaptor || value instanceof sf.data.DataManager) {
        return value;
      }

      var isOffline = value.offline;
      value.offline = false;
      value.adaptor = sfBlazor.getAdaptor(value.adaptor);
      var dataManager = new sf.data.DataManager(value);
      dataManager["offline"] = isOffline;

      if (this.dotnetInstance) {
        dataManager["dotnetInstance"] = this.dotnetInstance;
        dataManager["key"] = value.key;

        if (dataManager.adaptor instanceof BlazorAdaptor) {
          dataManager["adaptorName"] = value["adaptorName"];
          dataManager.dataSource.offline = false;
        }
      }

      if (this[value.guid] || this.templateRefs && this.templateRefs[value.guid]) {
        dataManager["baseAdaptorInstance"] = this[value.guid] || this.templateRefs[value.guid];
        dataManager["adaptorName"] = "CustomAdaptor";
      }

      return dataManager;
    } else if (typeof value === "string" && dateRegex.test(value)) {
      if (!arrayRegex.test(value)) {
        return !isNaN(Date.parse(value)) ? new Date(value) : value;
      } else {
        var values = JSON.parse(value);
        var val = [];

        for (i = 0; i < values.length; i++) {
          val.push(new Date(values[i]));
        }

        return val;
      }
    } else if (typeof value === "string" && (arrayRegex.test(value) || objectRegex.test(value)) && sfBlazor.isJson(value)) {
      return JSON.parse(value);
    }

    return value;
  },
  getEvaluatedFunc: function getEvaluatedFunc(args) {
    var reg = new RegExp(/\(+[^\)]+\)+/g);
    var spltData = args.split('new sf.data.Query().')[1];
    var rteFormatOptions = args.trim().split('new sf.richtexteditor.MarkdownFormatter')[1];

    if (spltData) {
      var splt = spltData.split(reg)[0];
      var match = spltData.match(reg)[0];
      var regx = new RegExp(/(\([a-z])+[^\)]+\)+/g);
      var inData = args.match(regx);

      if (inData !== null) {
        var inData1 = inData[0];
        var mtchinData = inData1.match(/\{+[^\)]+\}/g)[0];
        var spltinData = inData1.split(/\{+[^\)]+\}/g)[0];
      }

      if (match.indexOf('sf') !== -1) {
        var matchData = spltinData.match(/[^(]+/g)[0];
        var fData = matchData.split('.');
        var finalDatas = new sf.data.Query()[splt](sf[fData[1]][fData[2]][fData[3]](JSON.parse(mtchinData)));
      } else if (spltData.split('.').length > 1) {
        var reg = new RegExp(/([^\"]([A-Z]|[a-z])+[\"\]])/g);

        if (spltData.match(reg) !== null) {
          var regx = new RegExp(/([^\"]([A-Z]|[a-z])+[\"\]])|[0-9]/g);
          var matchg = spltData.match(regx);
          var spltDt = spltData.split('.');
          var chck = [];

          for (var i = 0; i < spltDt.length; i++) {
            var d = spltDt[i].match(/([A-z])+/g)[0];
            chck.push(d);
          }

          var finalDatas = new sf.data.Query()[chck[0]]()[chck[1]](matchg[0].slice(0, -1))[chck[2]](Number(matchg[1]));
        } else {
          var regh = new RegExp(/([^\']+([A-Z]|[a-z])+[\'\)])|[0-9]/g);
          var matchg = spltData.match(regh);
          var spltDt = spltData.split('.');
          var chck = [];

          for (var i = 0; i < spltDt.length; i++) {
            var d = spltDt[i].match(/([A-z])+/g)[0];
            chck.push(d);
          }

          var finalDatas = new sf.data.Query()[chck[0]](matchg[0].slice(0, -1))[chck[1]](matchg[1].slice(0, -1))[chck[2]](Number(matchg[2]));
        }
      } else {
        var _sf$data$Query;

        var matchData = match.match(/([A-z]+|[0-9]+)+/g);

        var finalDatas = (_sf$data$Query = new sf.data.Query())[splt].apply(_sf$data$Query, _toConsumableArray(matchData));
      }
    } else if (rteFormatOptions) {
      var trimVal = rteFormatOptions.trim();
      var optionsString = trimVal.substring(1, trimVal.length - 1).trim();

      if (optionsString.length > 0) {
        var jsonString = optionsString.replace(/'/g, "\"");
        var options = JSON.parse(jsonString);
        var finalDatas = new sf.richtexteditor.MarkdownFormatter(options);
      } else {
        var finalDatas = new sf.richtexteditor.MarkdownFormatter({});
      }
    } else {
      var finalDatas = new sf.data.Query();
    }

    return finalDatas;
  },
  triggerEJEvents: function () {
    var _triggerEJEvents = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee7(arg) {
      var data;
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.prev = 0;

              if (!arg) {
                _context7.next = 8;
                break;
              }

              arg["elementID"] = this["elementID"];
              _context7.next = 5;
              return this.dotnet.invokeMethodAsync("Trigger", this.eventName, window.sfBlazor.cleanStringify(arg));

            case 5:
              data = _context7.sent;
              _context7.next = 11;
              break;

            case 8:
              _context7.next = 10;
              return this.dotnet.invokeMethodAsync("Trigger", this.eventName, '');

            case 10:
              data = _context7.sent;

            case 11:
              _context7.next = 16;
              break;

            case 13:
              _context7.prev = 13;
              _context7.t0 = _context7["catch"](0);
              window.sfBlazor.throwError(_context7.t0, this);

            case 16:
              return _context7.abrupt("return", data);

            case 17:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this, [[0, 13]]);
    }));

    function triggerEJEvents(_x13) {
      return _triggerEJEvents.apply(this, arguments);
    }

    return triggerEJEvents;
  }(),
  copyWithoutCircularReferences: function copyWithoutCircularReferences(references, object) {
    try {
      var isArray = object && Array.isArray(object);
      var cleanObject = isArray ? [] : {};
      var keys = isArray ? object : object instanceof Node ? [object] : sfBlazor.getObjectKeys(object);
      keys.forEach( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee8(key) {
          var childObject, value, domObject, i, arrValues, ij, eventObj, propKey, eventValue;
          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  childObject = object.hasOwnProperty('parentObj') && object.properties ? object.properties : object;
                  value = isArray ? key : childObject[key];

                  if (isArray && (typeof value === "string" || typeof value === "number")) {
                    cleanObject.push(value);
                  } else if (value instanceof Node) {
                    domObject = sfBlazor.getDomObject(key, value, object);

                    if (isArray) {
                      cleanObject.push(domObject);
                    } else {
                      cleanObject[key] = domObject;
                    }
                  } else if (value && Array.isArray(value)) {
                    if (value.length > 0) {
                      for (i = 0; i < value.length; i++) {
                        if (!cleanObject[key]) cleanObject[key] = [];

                        if (key !== 'ej2_instances') {
                          if (value[i] && _typeof(value[i]) === 'object' && !(value[i] instanceof Date)) {
                            cleanObject[key].push(window.sfBlazor.copyWithoutCircularReferences(references, value[i]));
                          } else {
                            cleanObject[key].push(value[i]);
                          }
                        }
                      }
                    } else {
                      cleanObject[key] = [];
                    }
                  } else if (value && window.sfBlazor.isJson(value) && new RegExp(/^\[.*?\]$/).test(value)) {
                    arrValues = JSON.parse(value);
                    if (!cleanObject[key]) cleanObject[key] = [];

                    for (ij = 0; ij < arrValues.length; ij++) {
                      cleanObject[key].push(arrValues[ij]);
                    }
                  } else if (value && value instanceof Event) {
                    eventObj = {};

                    for (propKey in value) {
                      eventValue = value[propKey];

                      if (!(eventValue instanceof Node || eventValue instanceof Window) && propKey !== "path") {
                        eventObj[propKey] = eventValue;
                      }
                    }

                    cleanObject[key] = eventObj;
                  } else if (value && _typeof(value) === 'object') {
                    if (value instanceof File) {
                      cleanObject[key] = value;
                    } else if (references.indexOf(value) < 0) {
                      references.push(value);

                      if (value && value instanceof Date) {
                        cleanObject[key] = value;
                      } else if (sfBlazor.isJsonStringfy(value) && !sfBlazor.doesHaveFileObject(value)) {
                        isArray ? cleanObject.push(value) : cleanObject[key] = value;
                      } else {
                        if (!sfBlazor.isIgnoreProperty(key.toString())) {
                          cleanObject[key] = window.sfBlazor.copyWithoutCircularReferences(references, value);
                        } else {
                          cleanObject[key] = '###_Circular_###';
                        }
                      }

                      references.pop();
                    } else {
                      cleanObject[key] = '###_Circular_###';
                    }
                  } else if (typeof value !== 'function') {
                    cleanObject[key] = value;
                  }

                case 3:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8);
        }));

        return function (_x14) {
          return _ref2.apply(this, arguments);
        };
      }());
      return cleanObject;
    } catch (e) {
      console.log(e);
      return {};
    }
  },
  doesHaveFileObject: function doesHaveFileObject(obj) {
    var keys = Object.keys(obj);

    for (var m = 0; m < keys.length; m++) {
      if (obj[keys[m]] instanceof File) {
        return true;
      }
    }

    return false;
  },
  isJsonStringfy: function isJsonStringfy(args) {
    try {
      return JSON.stringify(args) && true;
    } catch (e) {
      return false;
    }
  },
  getObjectKeys: function getObjectKeys(obj) {
    var objectKeys = [];

    if (obj instanceof Event) {
      objectKeys = Object.keys(obj);
    } else {
      for (var key in obj) {
        objectKeys.push(key);
      }
    }

    return objectKeys;
  },
  isIgnoreProperty: function isIgnoreProperty(key) {
    return ['parentObj', 'controlParent', 'modelObserver', 'localObserver', 'moduleLoader'].indexOf(key) >= 0;
  },
  isJson: function isJson(value) {
    try {
      return JSON.parse(value);
    } catch (e) {
      return false;
    }
  },
  cleanStringify: function cleanStringify(object) {
    try {
      if (object && _typeof(object) === 'object') {
        object = window.sfBlazor.copyWithoutCircularReferences([object], object);
      }

      return JSON.stringify(object);
    } catch (e) {
      console.log(e);
      return '';
    }
  },
  bindEvents: function bindEvents(modelObj, events, dotnet, namespace) {
    if (events) {
      for (var i = 0; i < events.length; i = i + 1) {
        var curEvent = events[i];
        var scope = {
          dotnet: dotnet,
          eventName: curEvent,
          elementID: modelObj["elementID"],
          namespace: namespace
        };

        if (curEvent.indexOf('.') > 0) {
          var items = curEvent.split('.');
          var currentObject = modelObj;

          for (var j = 0; j < items.length - 1; j++) {
            var arrayIndex = new RegExp(/\[.*?\]/);

            if (arrayIndex.test(items[j])) {
              var index = items[j].match(arrayIndex)[0];
              var prop = items[j].replace(index, "");
              index = index.match(/\[(.*?)\]/)[1];
              j += 1;
              currentObject = currentObject[prop][index];
            } else {
              currentObject = currentObject[items[j]];
            }
          }

          currentObject[items[items.length - 1]] = window.sfBlazor.triggerEJEvents.bind(scope);
        } else {
          modelObj[curEvent] = window.sfBlazor.triggerEJEvents.bind(scope);
        }
      }
    }
  },
  tryParseInt: function tryParseInt(val) {
    var numRegex = /^-?\d+\.?\d*$/;
    return numRegex.test(val);
  },
  throwError: function throwError(e, comp) {
    // comp._dotnetInstance.invokeMethodAsync("ErrorHandling", e.message, e.stack);
    console.error(e.message + "\n" + e.stack);
  },
  getAdaptor: function getAdaptor(adaptor) {
    var adaptorObject;

    switch (adaptor) {
      case "ODataAdaptor":
        adaptorObject = new sf.data.ODataAdaptor();
        break;

      case "ODataV4Adaptor":
        adaptorObject = new sf.data.ODataV4Adaptor();
        break;

      case "UrlAdaptor":
        adaptorObject = new sf.data.UrlAdaptor();
        break;

      case "WebApiAdaptor":
        adaptorObject = new sf.data.WebApiAdaptor();
        break;

      case "JsonAdaptor":
        adaptorObject = new sf.data.JsonAdaptor();
        break;

      case "RemoteSaveAdaptor":
        adaptorObject = new sf.data.RemoteSaveAdaptor();
        break;

      case "CustomAdaptor":
        sfBlazor.initCustomAdaptor();
        adaptorObject = new window.CustomAdaptor();
        break;

      default:
        adaptorObject = new window.BlazorAdaptor();
        break;
    }

    return adaptorObject;
  },
  spinnerUtility: function spinnerUtility(action, options, target, type) {
    try {
      sf.popups.Spinner(action, options, target, type);
    } catch (e) {
      return window.sfBlazor.throwError(e);
    }
  },
  initBlazorAdaptor: function initBlazorAdaptor() {
    var BaseClass = sf.data ? sf.data.UrlAdaptor : function () {};

    window.BlazorAdaptor = /*#__PURE__*/function (_BaseClass) {
      _inherits(BlazorAdaptor, _BaseClass);

      var _super = _createSuper(BlazorAdaptor);

      function BlazorAdaptor() {
        _classCallCheck(this, BlazorAdaptor);

        return _super.apply(this, arguments);
      }

      _createClass(BlazorAdaptor, [{
        key: "processQuery",
        value: function processQuery(dm, query, hierarchyFilters) {
          var request = sf.data.UrlAdaptor.prototype.processQuery.apply(this, arguments);
          request.dotnetInstance = dm.dotnetInstance;
          request.key = dm.key;
          return request;
        }
      }, {
        key: "makeRequest",
        value: function makeRequest(request, deffered, args, query) {
          var fnFail = function fnFail(e) {
            args.error = e;
            deffered.reject(args);
          };

          var process = function process(data, aggregates, virtualSelectRecords) {
            var args = {};
            args.count = data.count ? parseInt(data.count.toString(), 10) : 0;
            args.result = data.result ? data.result : data;
            args.aggregates = data.aggregates;
            args.virtualSelectRecords = virtualSelectRecords;
            deffered.resolve(args);
          };

          var dm = JSON.parse(request.data);
          dm.serverSideGroup = false;
          var proxy = this;
          request.dotnetInstance.invokeMethodAsync("DataProcess", JSON.stringify(dm), request.key).then(function (data) {
            data = sf.data.DataUtil.parse.parseJson(data);

            if (data === null) {
              data = [];
            } else if (data.result === null) {
              data.result = [];
            }

            var pResult = proxy.processResponse(data, {}, query, null, request);
            process(pResult);
            return;
          })["catch"](function (e) {
            fnFail(e);
          });
        }
      }, {
        key: "insert",
        value: function insert(dm, data, tableName, query, position) {
          var args = {};
          args.dm = dm;
          args.data = data;
          args.tableName = tableName;
          args.query = query;
          args.requestType = "insert";
          args.position = position;
          return args;
        }
      }, {
        key: "remove",
        value: function remove(dm, keyField, value, tableName, query) {
          var args = {};
          args.dm = dm;
          args.data = value;
          args.keyField = keyField;
          args.tableName = tableName;
          args.query = query;
          args.requestType = "remove";
          return args;
        }
      }, {
        key: "update",
        value: function update(dm, keyField, value, tableName, query) {
          var args = {};
          args.dm = dm;
          args.data = value;
          args.keyField = keyField;
          args.tableName = tableName;
          args.query = query;
          args.requestType = "update";
          return args;
        }
      }, {
        key: "batchRequest",
        value: function batchRequest(dm, changes, e, query, original) {
          var args = {};
          args.dm = dm;
          args.changed = changes.changedRecords;
          args.added = changes.addedRecords;
          args.deleted = changes.deletedRecords;
          args.requestType = "batchsave";
          args.keyField = e.key;
          args.dropIndex = !sf.base.isNullOrUndefined(query) ? query.dragDropDestinationIndex : null;
          args.query = query;
          return args;
        }
      }, {
        key: "doAjaxRequest",
        value: function doAjaxRequest(args) {
          var defer = new sf.data.Deferred();
          var dm = args.dm;
          var query = sf.data.UrlAdaptor.prototype.processQuery.apply(this, [dm, args.query, false]);

          var fnFail = function fnFail(e) {
            args.error = e;
            defer.reject(args);
          };

          if (args.requestType === "insert") {
            dm.dotnetInstance.invokeMethodAsync('Insert', JSON.stringify(args.data), dm.key, args.position ? args.position : 0, query.data).then(function (data) {
              defer.resolve(data);
            })["catch"](function (e) {
              fnFail(e);
            });
          }

          if (args.requestType === "remove") {
            var dataKey = typeof args.data == "string" ? args.data : JSON.stringify(args.data);

            if (args.data instanceof Date) {
              dataKey = args.data.toJSON();
            }

            dm.dotnetInstance.invokeMethodAsync('Remove', dataKey, args.keyField, dm.key, query.data).then(function (data) {
              defer.resolve();
            })["catch"](function (e) {
              fnFail(e);
            });
          }

          if (args.requestType === "update") {
            dm.dotnetInstance.invokeMethodAsync('Update', JSON.stringify(args.data), args.keyField, dm.key, query.data).then(function (data) {
              var record = sf.data.DataUtil.parse.parseJson(data);
              defer.resolve(record);
            })["catch"](function (e) {
              fnFail(e);
            });
          }

          if (args.requestType === "batchsave") {
            dm.dotnetInstance.invokeMethodAsync('BatchUpdate', JSON.stringify(args.changed), JSON.stringify(args.added), JSON.stringify(args.deleted), args.keyField, dm.key, args.dropIndex, query.data).then(function (data) {
              var record = sf.data.DataUtil.parse.parseJson(data);
              defer.resolve(record);
            })["catch"](function (e) {
              fnFail(e);
            });
          }

          return defer.promise;
        }
      }]);

      return BlazorAdaptor;
    }(BaseClass);
  },
  initCustomAdaptor: function initCustomAdaptor() {
    window.CustomAdaptor = /*#__PURE__*/function (_window$BlazorAdaptor) {
      _inherits(CustomAdaptor, _window$BlazorAdaptor);

      var _super2 = _createSuper(CustomAdaptor);

      function CustomAdaptor() {
        _classCallCheck(this, CustomAdaptor);

        return _super2.apply(this, arguments);
      }

      _createClass(CustomAdaptor, [{
        key: "processQuery",
        value: function processQuery(dm, query, hierarchyFilters) {
          var request = sf.data.UrlAdaptor.prototype.processQuery.apply(this, arguments);
          request.dotnetInstance = dm.dotnetInstance;
          request.baseAdaptorInstance = dm.baseAdaptorInstance;
          request.key = dm.key;
          return request;
        }
      }, {
        key: "makeRequest",
        value: function makeRequest(request, deffered, args, query) {
          var fnFail = function fnFail(e) {
            args.error = e;
            deffered.reject(args);
          };

          var process = function process(data, aggregates, virtualSelectRecords) {
            var args = {};
            args.count = data.count ? parseInt(data.count.toString(), 10) : 0;
            args.result = data.result ? data.result : data;
            args.aggregates = aggregates;
            args.virtualSelectRecords = virtualSelectRecords;
            deffered.resolve(args);
          };

          var dm = JSON.parse(request.data);
          dm.serverSideGroup = false;
          var proxy = this;
          request["baseAdaptorInstance"].invokeMethodAsync("BaseRead", JSON.stringify(dm), request.key).then(function (data) {
            data = sf.data.DataUtil.parse.parseJson(data);

            if (data.result === null) {
              data.result = [];
            }

            var pResult = proxy.processResponse(data, {}, query, null, request);
            process(pResult);
            return;
          })["catch"](function (e) {
            fnFail(e);
          });
        }
      }, {
        key: "doAjaxRequest",
        value: function doAjaxRequest(args) {
          var defer = new sf.data.Deferred();
          var dm = args.dm;

          var fnFail = function fnFail(e) {
            args.error = e;
            defer.reject(args);
          };

          if (args.requestType === "insert") {
            dm.baseAdaptorInstance.invokeMethodAsync('BaseInsert', JSON.stringify(args.data), dm.key).then(function (data) {
              data = sf.data.DataUtil.parse.parseJson(data);
              defer.resolve(data);
            })["catch"](function (e) {
              fnFail(e);
            });
          }

          if (args.requestType === "remove") {
            dm.baseAdaptorInstance.invokeMethodAsync('BaseRemove', JSON.stringify(args.data), args.keyField, dm.key).then(function (data) {
              data = sf.data.DataUtil.parse.parseJson(data);
              defer.resolve(data);
            })["catch"](function (e) {
              fnFail(e);
            });
          }

          if (args.requestType === "update") {
            dm.baseAdaptorInstance.invokeMethodAsync('BaseUpdate', JSON.stringify(args.data), args.keyField, dm.key).then(function (data) {
              data = sf.data.DataUtil.parse.parseJson(data);
              defer.resolve(data);
            })["catch"](function (e) {
              fnFail(e);
            });
          }

          if (args.requestType === "batchsave") {
            dm.baseAdaptorInstance.invokeMethodAsync('BaseBatchUpdate', JSON.stringify(args.changed), JSON.stringify(args.added), JSON.stringify(args.deleted), args.keyField, dm.key, args.dropIndex).then(function (data) {
              data = sf.data.DataUtil.parse.parseJson(data);
              defer.resolve(data);
            })["catch"](function (e) {
              fnFail(e);
            });
          }

          return defer.promise;
        }
      }]);

      return CustomAdaptor;
    }(window.BlazorAdaptor);
  },
  requestHandler: function requestHandler(jsonObject) {
    try {
      var currentElement = document.getElementById(jsonObject.elementId);

      if (currentElement && currentElement.ej2_instances[0] && this.element && this.element.ej2_instances[0]) {
        this._dotnetInstance.invokeMethodAsync('GetPDFInfo', jsonObject);
      }
    } catch (e) {
      window.sfBlazor.throwError(e, this);
    }
  },
  ioSuccessHandler: function ioSuccessHandler(id, namespace, action, jsonResult) {
    try {
      var element = document.getElementById(id);

      if (element) {
        var comp = element.ej2_instances[0];
        var result = {
          data: jsonResult
        };

        if (namespace == 'sf.pdfviewer.PdfViewer') {
          switch (action) {
            case 'Load':
              comp.viewerBase.loadRequestHandler.successHandler(result);
              break;

            case "RenderPdfPages":
              comp.viewerBase.pageRequestHandler.successHandler(result);
              break;

            case "VirtualLoad":
              comp.viewerBase.virtualLoadRequestHandler.successHandler(result);
              break;

            case "Download":
              comp.viewerBase.dowonloadRequestHandler.successHandler(result);
              break;

            case "PrintImages":
              comp.printModule.printRequestHandler.successHandler(result);
              break;

            case "Search":
              comp.textSearchModule.searchRequestHandler.successHandler(result);
              break;

            case "Bookmarks":
              comp.bookmarkViewModule.bookmarkRequestHandler.successHandler(result);
              break;

            case "RenderThumbnailImages":
              comp.thumbnailViewModule.thumbnailRequestHandler.successHandler(result);
              break;

            case "RenderAnnotationComments":
              comp.annotationModule.stickyNotesAnnotationModule.commentsRequestHandler.successHandler(result);
              break;

            case "RenderPdfTexts":
              comp.textSearchModule.searchRequestHandler.successHandler(result);
              break;

            case "ImportAnnotations":
              comp.viewerBase.importAnnotationRequestHandler.successHandler(result);
              break;

            case "ExportAnnotations":
              comp.viewerBase.exportAnnotationRequestHandler.successHandler(result);
              break;

            case "ExportFormFields":
              comp.viewerBase.exportFormFieldsRequestHandler.successHandler(result);
              break;

            case "ImportFormFields":
              comp.viewerBase.importFormFieldsRequestHandler.successHandler(result);
              break;
          }
        }

        if (namespace == 'sf.documenteditor.DocumentEditorContainer' || namespace == 'sf.documenteditor.DocumentEditor') {
          var docEditorComp = sfBlazor.getDocEditor(comp);

          switch (action) {
            case 'SystemClipboard':
              result.data = JSON.parse(result.data);
              docEditorComp.editor.pasteRequestHandler.successHandler(result);
              break;

            case 'Import':
              comp.toolbarModule.importHandler.successHandler(result);
              break;

            case 'EnforceProtection':
              docEditorComp.editor.enforceProtectionInternal(result);
              break;

            case 'UnprotectDocument':
              docEditorComp.editor.onUnProtectionSuccess(result);
              break;
          }
        }
      }
    } catch (e) {
      window.sfBlazor.throwError(e, this);
    }
  },
  docEditRequestHandler: function () {
    var _docEditRequestHandler = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee9(jsonObject) {
      var file, dataUrl, fileInfo;
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.prev = 0;

              if (!(jsonObject instanceof FormData)) {
                _context9.next = 10;
                break;
              }

              file = jsonObject.get('files');
              dataUrl = "";
              _context9.next = 6;
              return window.sfBlazor.docEditFileReader(file).then(function (data) {
                dataUrl = data;
              });

            case 6:
              fileInfo = {
                "documentData": dataUrl.substr(dataUrl.indexOf(',') + 1),
                "fileName": file.name,
                "action": 'Import'
              };

              this._dotnetInstance.invokeMethodAsync('GetDocumentInfo', fileInfo);

              _context9.next = 12;
              break;

            case 10:
              if (jsonObject.hasOwnProperty('saltBase64')) {
                jsonObject['action'] = jsonObject.saltBase64 === '' ? 'EnforceProtection' : 'UnprotectDocument';
              } else if (jsonObject.hasOwnProperty('type') && jsonObject.hasOwnProperty('content')) {
                jsonObject['action'] = 'SystemClipboard';
              }

              this._dotnetInstance.invokeMethodAsync('GetDocumentInfo', jsonObject);

            case 12:
              _context9.next = 17;
              break;

            case 14:
              _context9.prev = 14;
              _context9.t0 = _context9["catch"](0);
              window.sfBlazor.throwError(_context9.t0, this);

            case 17:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this, [[0, 14]]);
    }));

    function docEditRequestHandler(_x15) {
      return _docEditRequestHandler.apply(this, arguments);
    }

    return docEditRequestHandler;
  }(),
  docEditFileReader: function docEditFileReader(file) {
    try {
      return new Promise(function (resolve, reject) {
        var fileReader = new FileReader();

        fileReader.onload = function () {
          resolve(fileReader.result);
        };

        fileReader.readAsDataURL(file);
      });
    } catch (e) {
      window.sfBlazor.throwError(e, this);
    }
  }
};

(function () {
  sf.base.enableBlazorMode();
})();

window.sfBlazor = window.sfBlazor || {};
Object.assign(window.sfBlazor, extended);

/***/ })

/******/ });